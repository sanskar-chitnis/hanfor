/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/ 		var executeModules = data[2];
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 		// add entry modules from loaded chunk to deferred list
/******/ 		deferredModules.push.apply(deferredModules, executeModules || []);
/******/
/******/ 		// run deferred modules when all chunks ready
/******/ 		return checkDeferredModules();
/******/ 	};
/******/ 	function checkDeferredModules() {
/******/ 		var result;
/******/ 		for(var i = 0; i < deferredModules.length; i++) {
/******/ 			var deferredModule = deferredModules[i];
/******/ 			var fulfilled = true;
/******/ 			for(var j = 1; j < deferredModule.length; j++) {
/******/ 				var depId = deferredModule[j];
/******/ 				if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 			}
/******/ 			if(fulfilled) {
/******/ 				deferredModules.splice(i--, 1);
/******/ 				result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 			}
/******/ 		}
/******/ 		return result;
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		"requirements": 0
/******/ 	};
/******/
/******/ 	var deferredModules = [];
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// add entry module to deferred list
/******/ 	deferredModules.push(["./js/requirements.js","commons"]);
/******/ 	// run deferred modules when ready
/******/ 	return checkDeferredModules();
/******/ })
/************************************************************************/
/******/ ({

/***/ "./js/datatables-advanced-search.js":
/*!******************************************!*\
  !*** ./js/datatables-advanced-search.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// Search query grammar declarations.\nconst operators = {\":AND:\": 1, \":OR:\": 1};\nconst leftAssoc = {\":AND:\": 1, \":OR:\": 1};\nconst rightAssoc = {};\nconst parantheses = {\"(\": 1, \")\": 1};\nconst precedenceOf = {\":AND:\": 3, \":OR:\": 2};\n\n/**\n * SearchNode represents one node in a search expression used to filter the requirements table.\n */\nclass SearchNode {\n    constructor(value) {\n        this.left = false;\n        this.value = value;\n        this.right = false;\n        this.col_target = -1;\n        this.update_target();\n    }\n\n    update_target() {\n        const col_string_index = this.value.indexOf(':COL_INDEX_');\n        if (col_string_index >= 0) {\n            const target_index = parseInt(this.value.substring(col_string_index + 11, col_string_index + 13));\n            if (target_index >= 0) {\n                this.value = this.value.substring(col_string_index + 14);\n                this.col_target = target_index;\n            }\n        }\n    }\n\n    evaluate(data, visible_columns) {\n        return evaluateSearchExpressionTree(this, data, visible_columns);\n    }\n\n    static is_search_string(token) {\n        return !(token in parantheses || token in operators);\n    }\n\n    static to_string(tree) {\n        let repr = '';\n        if (tree.left !== false) {\n            repr += SearchNode.to_string(tree.left) + ' ';\n        }\n        repr += tree.value;\n        if (tree.right !== false) {\n            repr += ' ' + SearchNode.to_string(tree.right);\n        }\n        return repr;\n    }\n\n    static peek(array) {\n        return array[array.length - 1];\n    }\n\n    /**\n     * Parses a search array to a binary search tree using shunting yard algorithm.\n     * @param array\n     * @returns {*}\n     */\n    static searchArrayToTree(array) {\n\n        let output_tree_stack = [], op_stack = [];\n\n        for (let i = 0, length = array.length; i < length;  i++) {\n            const token = array[i]; // current token\n\n            // If token is a search string, add it to the output_tree_stack as a singleton tree.\n            if (SearchNode.is_search_string(token))\n                output_tree_stack.push(new SearchNode(token));\n\n            else if (token in operators) {\n                // We encountered an operator.\n                while (op_stack.length) {\n                    // As long as there is an operator (prev_op) at the top of the op_stack\n                    const prev_op = SearchNode.peek(op_stack);\n                    if (prev_op in operators && (\n                            // and token is left associative and precedence <= to that of prev_op,\n                            (token in leftAssoc &&\n                                (precedenceOf[token] <= precedenceOf[prev_op])) ||\n                            // or token is right associative and its precedence < to that of prev_op,\n                            (token in rightAssoc &&\n                                (precedenceOf[token] < precedenceOf[prev_op]))\n                        )) {\n                        // Pop last two subtrees and make them children of a new subtree (with prev_op as root).\n                        let right = output_tree_stack.pop(), left = output_tree_stack.pop();\n                        let sub_tree = new SearchNode(op_stack.pop());\n                        sub_tree.left = left;\n                        sub_tree.right = right;\n                        output_tree_stack.push(sub_tree);\n                    } else {\n                        break;\n                    }\n                }\n                op_stack.push(token);\n            }\n\n            // If token is opening parenthesis, just push to the op_stack.\n            else if (token === \"(\")\n                op_stack.push(token);\n\n            // If token is closing parenthesis:\n            else if (token === \")\") {\n\n                let has_opening_match = false;\n\n                // Search for opening paranthesis in op_stack.\n                while (op_stack.length) {\n                    const op = op_stack.pop();\n                    if (op === \"(\") {\n                        has_opening_match = true;\n                        break;\n                    } else {\n                        // Until match pop operators off the op_stack and create a new subtree with operator as root.\n                        let right = output_tree_stack.pop();\n                        let left = output_tree_stack.pop();\n                        let sub_tree = new SearchNode(op);\n                        sub_tree.left = left;\n                        sub_tree.right = right;\n                        output_tree_stack.push(sub_tree);\n                    }\n                }\n                if (!has_opening_match)\n                    throw \"Error: parentheses mismatch.\";\n            }\n            else throw \"Error: Token unknown: \" + token;\n        }\n\n        // No more tokens in input but operator tokens in the op_stack:\n        while (op_stack.length) {\n\n            const op = op_stack.pop();\n\n            if (op === \"(\" || op === \")\")\n                throw \"Error: Parentheses mismatch.\";\n\n            // Create new subtree with op as root.\n            let right = output_tree_stack.pop();\n            let left = output_tree_stack.pop();\n            let sub_tree = new SearchNode(op);\n            sub_tree.left = left;\n            sub_tree.right = right;\n            output_tree_stack.push(sub_tree);\n        }\n\n        // Empty stack => create empty dummy Node.\n        if (output_tree_stack.length === 0) {\n            output_tree_stack.push(new SearchNode(''));\n        }\n\n        // The last remaining node should be the root of our complete search tree.\n        return output_tree_stack[0];\n    }\n\n    /**\n     * Splits a search query into array where each element is one token.\n     * @param query\n     * @param target_col optional target col to restrict the search on a specific col.\n     * @returns {*|string[]}\n     */\n    static awesomeQuerySplitt0r(query, target_col=undefined) {\n        // Split by :AND:\n        let result = query.split(/(:OR:|:AND:|\\(|\\))/g);\n        result = result.filter(String); // Remove empty elements.\n        // If the resulting tree should be restricted to a col..\n        if (target_col !== undefined) {\n            for (let i = 0, length = result.length; i < length;  i++) {\n                // Add :COL_INDEX_<target_col>: to each search string (not a operator or parenthesis).\n                if (!(result[i] in operators || result[i] in parantheses)) {\n                    result[i] = ':COL_INDEX_' + (\"00\" + target_col).slice(-2) + ':' + result[i];\n                }\n            }\n        }\n        return result;\n    }\n\n    /**\n     * Create a Search Tree from search query.\n     * @param query\n     * @param target_col optional target col to restrict the search on a specific col.\n     * @returns {*}\n     */\n    static fromQuery(query='', target_col=undefined) {\n        return SearchNode.searchArrayToTree(SearchNode.awesomeQuerySplitt0r(query, target_col));\n    }\n\n}\n\nmodule.exports = { SearchNode };\n\n/**\n * Check is value is in string. Support `\"` for exact and `\"\"` padding for exclusive match.\n * @param value string to be converted to regex and matched agains string.\n * @param string\n * @returns {boolean}\n */\nfunction check_value_in_string(value, string) {\n    // We support value to be `\n    //  * \"<inner>\"` for exact match.\n    //  * \"\"<inner>\"\" for exclusive match.\n\n    if (value.startsWith('\"\"') && value.endsWith('\"\"')) {\n        value = '^\\\\s*' + value.substr(2, (value.length - 4)) + '\\\\s*$';\n    } else {\n        // replace \" by \\b to allow for exact matches.\n        // In the input we escaped \" by \\\" so we would like to apply (?<!\\\\)\\\"\n        // since javascript does not allow negative look behinds we do\n        // something like ([^\\\\])(\\\") and replace the 2. group by \\b but keeping \\\" intact.\n        value = value.replace(/([^\\\\])?\\\"/g, \"$1\\\\b\");\n    }\n\n    const regex = new RegExp(value, \"i\");\n    return regex.test(string);\n\n}\n\n/**\n * Apply a search expression tree on row data.\n * @param tree\n * @param data\n * @param visible_columns\n * @returns {bool}\n */\nfunction evaluateSearchExpressionTree(tree, data, visible_columns) {\n    // Root node\n    if (tree === undefined) {\n        return true;\n    }\n\n    // Leaf node.\n    if (tree.left === false && tree.right === false) {\n        // First build the string to search.\n        let string = '';\n        // We have a specific target.\n        if (tree.col_target !== -1) {\n            string = data[tree.col_target];\n        } else {\n            // We search in all visible columns.\n            for (let i = 0; i < visible_columns.length; i++) {\n                if (visible_columns[i]) {\n                    string += data[i] + ' ';\n                }\n            }\n        }\n        const not_index = tree.value.indexOf(':NOT:');\n        if (not_index >= 0) { // Invert search on :NOT: keyword.\n            return !check_value_in_string(tree.value.substring(not_index + 5), string);\n        } else {\n            return check_value_in_string(tree.value, string);\n        }\n    }\n\n    // evaluate left tree\n    let left_sub = evaluateSearchExpressionTree(tree.left, data, visible_columns);\n\n    // evaluate right tree\n    let right_sub = evaluateSearchExpressionTree(tree.right, data, visible_columns);\n\n    // Apply operations\n    if (tree.value === ':AND:') {\n        return (left_sub && right_sub);\n    }\n\n    if (tree.value === ':OR:') {\n        return (left_sub || right_sub);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./js/datatables-advanced-search.js\n");

/***/ }),

/***/ "./js/requirements.js":
/*!****************************!*\
  !*** ./js/requirements.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function($) {__webpack_require__(/*! gasparesganga-jquery-loading-overlay */ \"./node_modules/gasparesganga-jquery-loading-overlay/src/loadingoverlay.js\");\r\n__webpack_require__(/*! bootstrap */ \"./node_modules/bootstrap/dist/js/bootstrap.js\");\r\n__webpack_require__(/*! bootstrap-confirmation2 */ \"./node_modules/bootstrap-confirmation2/dist/bootstrap-confirmation.js\");\r\n__webpack_require__(/*! datatables.net-bs4 */ \"./node_modules/datatables.net-bs4/js/dataTables.bootstrap4.js\");\r\n__webpack_require__(/*! datatables.net-select */ \"./node_modules/datatables.net-select/js/dataTables.select.js\");\r\n__webpack_require__(/*! jquery-ui/ui/widgets/autocomplete */ \"./node_modules/jquery-ui/ui/widgets/autocomplete.js\");\r\n__webpack_require__(/*! jquery-ui/ui/effects/effect-highlight */ \"./node_modules/jquery-ui/ui/effects/effect-highlight.js\");\r\n__webpack_require__(/*! ./bootstrap-tokenfield.js */ \"./js/bootstrap-tokenfield.js\");\r\n\r\n// Globals\r\nconst { SearchNode } = __webpack_require__(/*! ./datatables-advanced-search.js */ \"./js/datatables-advanced-search.js\");\r\nlet Fuse = __webpack_require__(/*! fuse.js */ \"./node_modules/fuse.js/dist/fuse.js\");\r\nlet { Textcomplete, Textarea } = __webpack_require__(/*! textcomplete */ \"./node_modules/textcomplete/lib/index.js\");\r\nlet fuse = new Fuse([], {});\r\n\r\nlet available_tags = ['', 'has_formalization'];\r\nlet available_status = ['', 'Todo', 'Review', 'Done'];\r\nlet available_types = [''];\r\nlet available_vars = [''];\r\nlet visible_columns = [true, true, true, true, true, true];\r\nlet filter_search_array = [];\r\nlet get_query = JSON.parse(search_query); // search_query is set in index.html\r\nlet tag_colors = {};\r\nlet type_inference_errors = [];\r\nlet req_search_string = sessionStorage.getItem('req_search_string');\r\nlet filter_status_string = sessionStorage.getItem('filter_status_string');\r\nlet filter_tag_string = sessionStorage.getItem('filter_tag_string');\r\nlet filter_type_string = sessionStorage.getItem('filter_type_string');\r\nlet search_tree = undefined;\r\nlet filter_tree = undefined;\r\n\r\n\r\n/**\r\n * Update the search expression tree.\r\n */\r\nfunction update_search() {\r\n    req_search_string = $('#search_bar').val().trim();\r\n    sessionStorage.setItem('req_search_string', req_search_string);\r\n    search_tree = SearchNode.fromQuery(req_search_string);\r\n}\r\n\r\n/**\r\n * Update the filter search tree used to filter the table by the values from the Filter tab.\r\n */\r\nfunction update_filter() {\r\n    filter_search_array = [];\r\n    function pad_with_parantheses(array) {\r\n        return [\"(\"].concat(array, [\")\"]);\r\n    }\r\n    function add_query(array, query, target) {\r\n        if (query.length > 0) {\r\n            if (array.length > 0) {\r\n                array = array.concat([\":AND:\"]);\r\n            }\r\n            array = array.concat(pad_with_parantheses(SearchNode.awesomeQuerySplitt0r(query, target)));\r\n        }\r\n        return array\r\n    }\r\n    filter_status_string = $('#status-filter-input').val();\r\n    filter_tag_string = $('#tag-filter-input').val();\r\n    filter_type_string = $('#type-filter-input').val();\r\n\r\n    sessionStorage.setItem('filter_status_string', filter_status_string);\r\n    sessionStorage.setItem('filter_tag_string', filter_tag_string);\r\n    sessionStorage.setItem('filter_type_string', filter_type_string);\r\n\r\n    filter_search_array = add_query(filter_search_array, filter_type_string, 4);\r\n    filter_search_array = add_query(filter_search_array, filter_tag_string, 5);\r\n    filter_search_array = add_query(filter_search_array, filter_status_string, 6);\r\n\r\n    filter_tree = SearchNode.searchArrayToTree(filter_search_array);\r\n}\r\n\r\n\r\nfunction evaluate_search(data){\r\n    return search_tree.evaluate(data, visible_columns) && filter_tree.evaluate(data, visible_columns);\r\n}\r\n\r\n/**\r\n * Apply a URL search query to the requirements table.\r\n * @param requirements_table\r\n * @param get_query\r\n */\r\nfunction process_url_query(get_query) {\r\n    // Apply search if we have one.\r\n    if (get_query.q.length > 0) {\r\n        function pad(num) {\r\n            let s = \"00\" + num;\r\n            return s.substr(s.length-2);\r\n        }\r\n        // Clear filters.\r\n        $('#status-filter-input').val('');\r\n        $('#tag-filter-input').val('');\r\n        $('#type-filter-input').val('');\r\n\r\n        // Set search for requirement ID\r\n        const s = ':COL_INDEX_' + pad(get_query.col).toString() + ':' + get_query.q;\r\n        $('#search_bar').val(s);\r\n    }\r\n}\r\n\r\n/**\r\n * Stores the active (in modal) requirement and updates the row in the requirements table.\r\n * @param {DataTable} requirements_table\r\n */\r\nfunction store_requirement(requirements_table) {\r\n    let requirement_modal_content = $('.modal-content');\r\n    requirement_modal_content.LoadingOverlay('show');\r\n\r\n    const req_id = $('#requirement_id').val();\r\n    const req_tags = $('#requirement_tag_field').val();\r\n    const req_status = $('#requirement_status').val();\r\n    const updated_formalization = $('#requirement_modal').data('updated_formalization');\r\n    const associated_row_id = parseInt($('#modal_associated_row_index').val());\r\n\r\n    // Fetch the formalizations\r\n    let formalizations = {};\r\n    $('.formalization_card').each(function ( index ) {\r\n        // Scope and Pattern\r\n        let formalization = {};\r\n        formalization['id'] = $(this).attr('title');\r\n        $( this ).find( 'select').each( function () {\r\n            if ($( this ).hasClass('scope_selector')) {\r\n                formalization['scope'] = $( this ).val();\r\n            }\r\n            if ($( this ).hasClass('pattern_selector')) {\r\n                formalization['pattern'] = $( this ).val();\r\n            }\r\n        });\r\n\r\n        // Expressions\r\n        formalization['expression_mapping'] = {};\r\n        $( this ).find( \"textarea.reqirement-variable\" ).each(function () {\r\n            if ($(this).attr('title') !== '')\r\n            formalization['expression_mapping'][$(this).attr('title')] = $(this).val();\r\n        });\r\n\r\n        formalizations[formalization['id']] = formalization;\r\n    });\r\n\r\n    // Store the requirement.\r\n    $.post( \"api/req/update\",\r\n        {\r\n            id: req_id,\r\n            row_idx: associated_row_id,\r\n            update_formalization: updated_formalization,\r\n            tags: req_tags,\r\n            status: req_status,\r\n            formalizations: JSON.stringify(formalizations)\r\n        },\r\n        // Update requirements table on success or show an error message.\r\n        function( data ) {\r\n            requirement_modal_content.LoadingOverlay('hide', true);\r\n            if (data['success'] === false) {\r\n                alert(data['errormsg']);\r\n            } else {\r\n                requirements_table.row(associated_row_id).data(data);\r\n                $('#requirement_modal').data('unsaved_changes', false).modal('hide');\r\n            }\r\n    }).done(function () {\r\n        update_logs();\r\n    });\r\n}\r\n\r\n\r\n/***\r\n *\r\n * @param requirements_table\r\n * @returns {Array} User selected requirement ids.\r\n */\r\nfunction get_selected_requirement_ids(requirements_table) {\r\n    let selected_ids = [];\r\n    requirements_table.rows( {selected:true} ).every( function () {\r\n        let d = this.data();\r\n        selected_ids.push(d['id']);\r\n    } );\r\n\r\n    return selected_ids\r\n}\r\n\r\n\r\nfunction apply_multi_edit(requirements_table) {\r\n    let page = $('body');\r\n    page.LoadingOverlay('show');\r\n    let add_tag = $('#multi-add-tag-input').val().trim();\r\n    let remove_tag = $('#multi-remove-tag-input').val().trim();\r\n    let set_status = $('#multi-set-status-input').val().trim();\r\n    let selected_ids = get_selected_requirement_ids(requirements_table);\r\n\r\n    $.post( \"api/req/multi_update\",\r\n        {\r\n            add_tag: add_tag,\r\n            remove_tag: remove_tag,\r\n            set_status: set_status,\r\n            selected_ids: JSON.stringify(selected_ids)\r\n        },\r\n        // Update requirements table on success or show an error message.\r\n        function( data ) {\r\n            page.LoadingOverlay('hide', true);\r\n            if (data['success'] === false) {\r\n                alert(data['errormsg']);\r\n            } else {\r\n                location.reload();\r\n            }\r\n    });\r\n}\r\n\r\n\r\nfunction add_top_guess_to_selected_requirements(requirements_table) {\r\n    let page = $('body');\r\n    page.LoadingOverlay('show');\r\n    let selected_ids = get_selected_requirement_ids(requirements_table);\r\n    let insert_mode = $('#top_guess_append_mode').val();\r\n\r\n    $.post( \"api/req/multi_add_top_guess\",\r\n        {\r\n            selected_ids: JSON.stringify(selected_ids),\r\n            insert_mode: insert_mode\r\n        },\r\n        // Update requirements table on success or show an error message.\r\n        function( data ) {\r\n            page.LoadingOverlay('hide', true);\r\n            if (data['success'] === false) {\r\n                alert(data['errormsg']);\r\n            } else {\r\n                location.reload();\r\n            }\r\n    });\r\n}\r\n\r\n/**\r\n * Enable/disable the active variables (P, Q, R, ...) in the requirement modal based on scope and pattern.\r\n */\r\nfunction update_vars() {\r\n    $('.requirement_var_group').each(function () {\r\n        $( this ).hide();\r\n        $( this ).removeClass('type-error');\r\n    });\r\n\r\n    $('.formalization_card').each(function ( index ) {\r\n        // Fetch attributes\r\n        const formalization_id = $(this).attr('title');\r\n        const selected_scope = $('#requirement_scope' + formalization_id).val();\r\n        const selected_pattern = $('#requirement_pattern' + formalization_id).val();\r\n        let header = $('#formalization_heading' + formalization_id);\r\n        let var_p = $('#requirement_var_group_p' + formalization_id);\r\n        let var_q = $('#requirement_var_group_q' + formalization_id);\r\n        let var_r = $('#requirement_var_group_r' + formalization_id);\r\n        let var_s = $('#requirement_var_group_s' + formalization_id);\r\n        let var_t = $('#requirement_var_group_t' + formalization_id);\r\n        let var_u = $('#requirement_var_group_u' + formalization_id);\r\n\r\n        // Set the red boxes for type inference failed expressions.\r\n        if (formalization_id in type_inference_errors) {\r\n            for (let i = 0; i < type_inference_errors[formalization_id].length; i++) {\r\n                $('#formalization_var_' + type_inference_errors[formalization_id][i] + formalization_id)\r\n                    .addClass('type-error');\r\n                header.addClass('type-error-head');\r\n            }\r\n        } else {\r\n            header.removeClass('type-error-head');\r\n        }\r\n\r\n        switch(selected_scope) {\r\n            case 'BEFORE':\r\n            case 'AFTER':\r\n                var_p.show();\r\n                break;\r\n            case 'BETWEEN':\r\n            case 'AFTER_UNTIL':\r\n                var_p.show();\r\n                var_q.show();\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        switch(selected_pattern) {\r\n            case 'Absence':\r\n            case 'Universality':\r\n            case 'Existence':\r\n            case 'BoundedExistence':\r\n                var_r.show();\r\n                break;\r\n            case 'Invariant':\r\n            case 'Precedence':\r\n            case 'Response':\r\n            case 'MinDuration':\r\n            case 'MaxDuration':\r\n            case 'BoundedRecurrence':\r\n                var_r.show();\r\n                var_s.show();\r\n                break;\r\n            case 'PrecedenceChain1-2':\r\n            case 'PrecedenceChain2-1':\r\n            case 'ResponseChain1-2':\r\n            case 'ResponseChain2-1':\r\n            case 'BoundedResponse':\r\n            case 'BoundedInvariance':\r\n            case 'TimeConstrainedInvariant':\r\n                var_r.show();\r\n                var_s.show();\r\n                var_t.show();\r\n                break;\r\n            case 'ConstrainedChain':\r\n            case 'TimeConstrainedMinDuration':\r\n            case 'ConstrainedTimedExistence':\r\n                var_r.show();\r\n                var_s.show();\r\n                var_t.show();\r\n                var_u.show();\r\n                break;\r\n            case 'NotFormalizable':\r\n                var_p.hide();\r\n                var_q.hide();\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    });\r\n}\r\n\r\n\r\n/**\r\n * Updates the formalization textarea based on the selected scope and expressions in P, Q, R, S, T.\r\n */\r\nfunction update_formalization() {\r\n    $('.formalization_card').each(function ( index ) {\r\n        // Fetch attributes\r\n        const formalization_id = $(this).attr('title');\r\n\r\n        let formalization = '';\r\n        const selected_scope = $('#requirement_scope' + formalization_id).find('option:selected').text().replace(/\\s\\s+/g, ' ');\r\n        const selected_pattern = $('#requirement_pattern' + formalization_id).find('option:selected').text().replace(/\\s\\s+/g, ' ');\r\n\r\n        if (selected_scope !== 'None' && selected_pattern !== 'None') {\r\n            formalization = selected_scope + ', ' + selected_pattern + '.';\r\n        }\r\n\r\n        // Update formalization with variables.\r\n        let var_p = $('#formalization_var_p' + formalization_id).val();\r\n        let var_q = $('#formalization_var_q' + formalization_id).val();\r\n        let var_r = $('#formalization_var_r' + formalization_id).val();\r\n        let var_s = $('#formalization_var_s' + formalization_id).val();\r\n        let var_t = $('#formalization_var_t' + formalization_id).val();\r\n        let var_u = $('#formalization_var_u' + formalization_id).val();\r\n\r\n        if (var_p.length > 0) {\r\n            formalization = formalization.replace(/{P}/g, var_p);\r\n        }\r\n        if (var_q.length > 0) {\r\n            formalization = formalization.replace(/{Q}/g, var_q);\r\n        }\r\n        if (var_r.length > 0) {\r\n            formalization = formalization.replace(/{R}/g, var_r);\r\n        }\r\n        if (var_s.length > 0) {\r\n            formalization = formalization.replace(/{S}/g, var_s);\r\n        }\r\n        if (var_t.length > 0) {\r\n            formalization = formalization.replace(/{T}/g, var_t);\r\n        }\r\n        if (var_u.length > 0) {\r\n            formalization = formalization.replace(/{U}/g, var_u);\r\n        }\r\n\r\n        $('#current_formalization_textarea' + formalization_id).val(formalization);\r\n    });\r\n    $('#requirement_modal').data({\r\n        'unsaved_changes': true,\r\n        'updated_formalization': true\r\n    });\r\n}\r\n\r\n\r\nfunction add_formalization() {\r\n    // Request a new Formalization. And add its edit elements to the modal.\r\n    let requirement_modal_content = $('.modal-content');\r\n    requirement_modal_content.LoadingOverlay('show');\r\n\r\n    const req_id = $('#requirement_id').val();\r\n    $.post( \"api/req/new_formalization\",\r\n        {\r\n            id: req_id\r\n        },\r\n        function( data ) {\r\n            requirement_modal_content.LoadingOverlay('hide', true);\r\n            if (data['success'] === false) {\r\n                alert(data['errormsg']);\r\n            } else {\r\n                $('#formalization_accordion').append(data['html']);\r\n            }\r\n    }).done(function () {\r\n        update_vars();\r\n        update_formalization();\r\n        bind_expression_buttons();\r\n        bind_var_autocomplete();\r\n        update_logs();\r\n    });\r\n}\r\n\r\n\r\nfunction add_formalization_from_guess(scope, pattern, mapping) {\r\n    // Request a new Formalization. And add its edit elements to the modal.\r\n    let requirement_modal_content = $('.modal-content');\r\n    requirement_modal_content.LoadingOverlay('show');\r\n\r\n    let requirement_id = $('#requirement_id').val();\r\n    $.post( \"api/req/add_formalization_from_guess\",\r\n        {\r\n            requirement_id: requirement_id,\r\n            scope: scope,\r\n            pattern: pattern,\r\n            mapping: JSON.stringify(mapping)\r\n        },\r\n        function( data ) {\r\n            requirement_modal_content.LoadingOverlay('hide', true);\r\n            if (data['success'] === false) {\r\n                alert(data['errormsg']);\r\n            } else {\r\n                $('#formalization_accordion').append(data['html']);\r\n            }\r\n    }).done(function () {\r\n        update_vars();\r\n        update_formalization();\r\n        bind_expression_buttons();\r\n        bind_var_autocomplete();\r\n        update_logs();\r\n    });\r\n}\r\n\r\n\r\nfunction delete_formalization(formal_id) {\r\n    let requirement_modal_content = $('.modal-content');\r\n    requirement_modal_content.LoadingOverlay('show');\r\n    const req_id = $('#requirement_id').val();\r\n    $.post( \"api/req/del_formalization\",\r\n        {\r\n            requirement_id: req_id,\r\n            formalization_id: formal_id\r\n        },\r\n        function( data ) {\r\n            requirement_modal_content.LoadingOverlay('hide', true);\r\n            if (data['success'] === false) {\r\n                alert(data['errormsg']);\r\n            } else {\r\n                $('#formalization_accordion').html(data['html']);\r\n            }\r\n    }).done(function () {\r\n        update_vars();\r\n        update_formalization();\r\n        bind_expression_buttons();\r\n        bind_var_autocomplete();\r\n        update_logs();\r\n    });\r\n}\r\n\r\n\r\nfunction bind_expression_buttons() {\r\n    $('.formalization_selector').change(function () {\r\n        update_vars();\r\n        update_formalization();\r\n    });\r\n    $('.reqirement-variable, .req_var_type').change(function () {\r\n        update_formalization();\r\n    });\r\n    $('.delete_formalization').confirmation({\r\n      rootSelector: '.delete_formalization'\r\n    }).click(function () {\r\n        delete_formalization( $(this).attr('name') );\r\n    });\r\n}\r\n\r\n\r\n/**\r\n * Reload fuse the fuzzy search provider used for autocomplete.\r\n * fuse will be reloaded with available_vars.\r\n */\r\nfunction update_fuse() {\r\n    let options = {\r\n      shouldSort: true,\r\n      threshold: 0.6,\r\n      location: 0,\r\n      distance: 100,\r\n      maxPatternLength: 12,\r\n      minMatchCharLength: 1,\r\n      keys: undefined\r\n    };\r\n\r\n    fuse = new Fuse(available_vars, options);\r\n}\r\n\r\n\r\n/**\r\n * Search term in the fuse fuzzy search provider.\r\n * Fuse is initialized with the available_vars.\r\n * @param term\r\n */\r\nfunction fuzzy_search(term) {\r\n    return fuse.search(term);\r\n}\r\n\r\n\r\n/**\r\n * Bind autocomplete trigger to formalization input fields.\r\n * Implement autocomplete.\r\n *\r\n */\r\nfunction bind_var_autocomplete() {\r\n    $( \".reqirement-variable\" ).each(function ( index ) {\r\n        let editor = new Textarea(this);\r\n        let textcomplete = new Textcomplete(editor, {\r\n          dropdown: {\r\n              maxCount: 10\r\n          }\r\n        });\r\n        textcomplete.register([{\r\n          match: /(^|\\s|[!=&\\|>]+)(\\w+)$/,\r\n          search: function (term, callback) {\r\n              include_elems = fuzzy_search(term);\r\n\r\n              result = [];\r\n              for (let i = 0; i < Math.min(10, include_elems.length); i++) {\r\n                    result.push(available_vars[include_elems[i]]);\r\n              }\r\n              callback(result);\r\n          },\r\n          replace: function (value) {\r\n            return '$1' + value + ' ';\r\n          }\r\n        }]);\r\n        // Close dropdown if textarea is no longer focused.\r\n        $(this).on('blur click', function (e) {\r\n            textcomplete.dropdown.deactivate();\r\n            e.preventDefault();\r\n        })\r\n    })\r\n}\r\n\r\n\r\nfunction prevent_double_token_insert() {\r\n    $('#requirement_tag_field').on('tokenfield:createtoken', function (event) {\r\n        let existingTokens = $(this).tokenfield('getTokens');\r\n        $.each(existingTokens, function(index, token) {\r\n            if (token.value === event.attrs.value)\r\n                event.preventDefault();\r\n        });\r\n    });\r\n}\r\n\r\n\r\nfunction load_requirement(row_idx) {\r\n    if (row_idx === -1) {\r\n        alert(\"Requirement not found.\");\r\n        return\r\n    }\r\n\r\n    // Get row data\r\n    let data = $('#requirements_table').DataTable().row(row_idx).data();\r\n\r\n    // Prepare requirement Modal\r\n    let requirement_modal_content = $('.modal-content');\r\n    $('#requirement_modal').modal('show');\r\n    requirement_modal_content.LoadingOverlay('show');\r\n    $('#formalization_accordion').html('');\r\n\r\n    // Set available tags.\r\n    $('#requirement_tag_field').data('bs.tokenfield').$input.autocomplete({source: available_tags});\r\n\r\n    // Get the requirement data and set the modal.\r\n    $.get( \"api/req/get\", { id: data['id'], row_idx: row_idx }, function (data) {\r\n        // Meta information\r\n        $('#requirement_id').val(data.id);\r\n        $('#modal_associated_row_index').val(row_idx);\r\n        available_vars = data.available_vars;\r\n        type_inference_errors = data.type_inference_errors;\r\n        update_fuse();\r\n\r\n        // Visible information\r\n        $('#requirement_modal_title').html(data.id + ': ' + data.type);\r\n        $('#description_textarea').text(data.desc);\r\n        $('#add_guess_description').text(data.desc);\r\n\r\n        // Parse the formalizations\r\n        $('#formalization_accordion').html(data.formalizations_html);\r\n\r\n        $('#requirement_scope').val(data.scope);\r\n        $('#requirement_pattern').val(data.pattern);\r\n\r\n        // Set the tags\r\n        $('#requirement_tag_field').tokenfield('setTokens', data.tags);\r\n        $('#requirement_status').val(data.status);\r\n\r\n        // Set csv_data\r\n        let csv_row_content = $('#csv_content_accordion');\r\n        csv_row_content.html('');\r\n        csv_row_content.collapse('hide');\r\n        let csv_data = data.csv_data;\r\n        for(const key in csv_data){\r\n            if (csv_data.hasOwnProperty(key)){\r\n                const value = csv_data[key];\r\n                csv_row_content.append('<p><strong>' + key + ':</strong>' + value + '</p>');\r\n            }\r\n        }\r\n        if (data.success === false) {\r\n            alert('Could Not load the Requirement: ' + data.errormsg);\r\n        }\r\n    } ).done(function () {\r\n        // Update visible Vars.\r\n        update_vars();\r\n        // Handle autocompletion for variables.\r\n        bind_var_autocomplete();\r\n        // Update available vars based on the selection of requirement and pattern.\r\n        bind_expression_buttons();\r\n        // Prevent inserting a token twice on enter\r\n        prevent_double_token_insert();\r\n        $('#requirement_modal').data({\r\n            'unsaved_changes': false,\r\n            'updated_formalization': false\r\n        });\r\n        requirement_modal_content.LoadingOverlay('hide', true);\r\n    });\r\n}\r\n\r\n/**\r\n * Bind the Links to open a requirement modal.\r\n * Implement Behaviour:\r\n *  * Load and show requirement data\r\n * @param requirements_table\r\n */\r\nfunction bind_requirement_id_to_modals(requirements_table) {\r\n    // Add listener for clicks on the Rows.\r\n    $('#requirements_table').find('tbody').on('click', 'a', function (event) {\r\n        // prevent body to be scrolled to the top.\r\n        event.preventDefault();\r\n        let row_idx = requirements_table.row($(event.target).parent()).index();\r\n        load_requirement(row_idx);\r\n    } );\r\n}\r\n\r\n\r\n/**\r\n * Update the color of the column toggle buttons.\r\n * Column visible -> Button blue (btn-info).\r\n * Column not visible -> Button grey (btn-secondary).\r\n * Update visible_columns\r\n */\r\nfunction update_visible_columns_information() {\r\n    let requirements_table = $('#requirements_table').DataTable();\r\n    let new_visible_columns = [];\r\n    $.each(requirements_table.columns().visible(), function(key, value) {\r\n        if(value === false){\r\n            $('#col_toggle_button_' + key).removeClass('btn-info').addClass('btn-secondary');\r\n            new_visible_columns.push(false);\r\n        } else {\r\n            $('#col_toggle_button_' + key).removeClass('btn-secondary').addClass('btn-info');\r\n            new_visible_columns.push(true);\r\n        }\r\n    });\r\n    visible_columns = new_visible_columns;\r\n}\r\n\r\n/**\r\n * Bind the requirements table manipulators to the table.\r\n * Initialize manipulators behaviour.\r\n * @param requirements_table The requirements table\r\n */\r\nfunction init_datatable_manipulators(requirements_table) {\r\n    // Headers extension: Add index to address in search.\r\n    requirements_table.columns().every( function ( index ) {\r\n        if (index > 0) requirements_table.column( index ).header().append(' (' + index + ')');\r\n    } );\r\n\r\n    // Save button\r\n    $('#save_requirement_modal').click(function () {\r\n        store_requirement(requirements_table);\r\n    });\r\n\r\n    // Table Search related stuff.\r\n    // Bind big custom searchbar to search the table.\r\n    $('#search_bar').keypress(function(e) {\r\n        if(e.which === 13) { // Search on enter.\r\n            update_search();\r\n            requirements_table.draw();\r\n        }\r\n    });\r\n\r\n    // Table filters.\r\n    $('#type-filter-input').autocomplete({\r\n        minLength: 0,\r\n        source: available_types,\r\n        delay: 100\r\n    });\r\n\r\n    $('#status-filter-input').autocomplete({\r\n        minLength: 0,\r\n        source: available_status,\r\n        delay: 100\r\n    });\r\n\r\n    $('#tag-filter-input').autocomplete({\r\n        minLength: 0,\r\n        source: available_tags,\r\n        delay: 100\r\n    });\r\n\r\n    $('#tag-filter-input, #status-filter-input, #type-filter-input')\r\n        .on('focus', function() { $(this).keydown(); })\r\n        .on('keypress', function (e) {\r\n            if (e.which === 13) { // Search on Enter.\r\n                update_filter();\r\n                requirements_table.draw();\r\n            }\r\n        });\r\n\r\n    $('#table-filter-toggle').click(function () {\r\n        $('#tag-filter-input').autocomplete({source: available_tags});\r\n        $('#type-filter-input').autocomplete({source: available_types});\r\n    });\r\n\r\n    // Clear all applied searches.\r\n    $('.clear-all-filters').click(function () {\r\n        $('#status-filter-input').val('').effect(\"highlight\", {color: 'green'}, 500);\r\n        $('#tag-filter-input').val('').effect(\"highlight\", {color: 'green'}, 500);\r\n        $('#type-filter-input').val('').effect(\"highlight\", {color: 'green'}, 500);\r\n        $('#search_bar').val('').effect(\"highlight\", {color: 'green'}, 500);\r\n        update_filter();\r\n        update_search();\r\n        requirements_table.draw();\r\n    });\r\n\r\n    // Listen for tool section triggers.\r\n    $('#gen-req-from-selection').click(function () {\r\n        let req_ids = [];\r\n        requirements_table.rows( {search:'applied'} ).every( function () {\r\n            let d = this.data();\r\n            req_ids.push(d['id']);\r\n         } );\r\n        $('#selected_requirement_ids').val(JSON.stringify(req_ids));\r\n        $('#generate_req_form').submit();\r\n    });\r\n\r\n    $('#gen-csv-from-selection').click(function () {\r\n        let req_ids = [];\r\n        requirements_table.rows( {search:'applied'} ).every( function () {\r\n            let d = this.data();\r\n            req_ids.push(d['id']);\r\n         } );\r\n        $('#selected_csv_requirement_ids').val(JSON.stringify(req_ids));\r\n        $('#generate_csv_form').submit();\r\n    });\r\n\r\n    // Column toggling\r\n    $('.colum-toggle-button').on( 'click', function (e) {\r\n        e.preventDefault();\r\n\r\n        // Get the column API object\r\n        let column = requirements_table.column($(this).attr('data-column'));\r\n\r\n        // Toggle the visibility\r\n        column.visible( ! column.visible() );\r\n        update_visible_columns_information();\r\n    } );\r\n\r\n    $('.reset-colum-toggle').on('click', function (e) {\r\n        e.preventDefault();\r\n        requirements_table.columns( '.default-col' ).visible( true );\r\n        requirements_table.columns( '.extra-col' ).visible( false );\r\n        update_visible_columns_information();\r\n    });\r\n    update_visible_columns_information();\r\n\r\n    // Select rows\r\n    $('.select-all-button').on('click', function (e) {\r\n        // Toggle selection on\r\n        if ($( this ).hasClass('btn-secondary')) {\r\n            requirements_table.rows( {page:'current'} ).select();\r\n        }\r\n        else { // Toggle selection off\r\n            requirements_table.rows( {page:'current'} ).deselect();\r\n        }\r\n        // Toggle button state.\r\n        $('.select-all-button').toggleClass('btn-secondary btn-primary');\r\n    });\r\n\r\n    // Toggle \"Select all rows to `off` on user specific selection.\"\r\n    requirements_table.on( 'user-select', function ( ) {\r\n        let select_buttons = $('.select-all-button');\r\n        select_buttons.removeClass('btn-primary');\r\n        select_buttons.addClass('btn-secondary ');\r\n    });\r\n\r\n    // Bind autocomplete for \"edit-selected\" inputs\r\n    $('#multi-add-tag-input, #multi-remove-tag-input').autocomplete({\r\n        minLength: 0,\r\n        source: available_tags,\r\n        delay: 100\r\n    }).on('focus', function() { $(this).keydown(); }).val('');\r\n\r\n    $('#multi-set-status-input').autocomplete({\r\n        minLength: 0,\r\n        source: available_status,\r\n        delay: 100\r\n    }).on('focus', function() { $(this).keydown(); }).val('');\r\n\r\n    $('.apply-multi-edit').click(function () {\r\n        apply_multi_edit(requirements_table);\r\n    });\r\n\r\n    $('.add_top_guess_button').confirmation({\r\n      rootSelector: '.add_top_guess_button'\r\n    }).click(function () {\r\n        add_top_guess_to_selected_requirements(requirements_table);\r\n    });\r\n}\r\n\r\n/**\r\n * Fetch requirements from hanfor api and build the requirements table.\r\n * Apply search queries to table\r\n * Bind button/links to events.\r\n * @param columnDefs predefined columDefs (https://datatables.net/reference/option/columnDefs)\r\n */\r\nfunction init_datatable(columnDefs) {\r\n    let requirements_table = $('#requirements_table').DataTable({\r\n        \"language\": {\r\n          \"emptyTable\": \"Loading data.\"\r\n        },\r\n        \"paging\": true,\r\n        \"stateSave\": true,\r\n        \"select\": {\r\n            style:    'os',\r\n            selector: 'td:first-child'\r\n        },\r\n        \"pageLength\": 50,\r\n        \"lengthMenu\": [[10, 50, 100, 500, -1], [10, 50, 100, 500, \"All\"]],\r\n        \"dom\": 'rt<\"container\"<\"row\"<\"col-md-6\"li><\"col-md-6\"p>>>',\r\n        \"ajax\": \"api/req/gets\",\r\n        \"deferRender\": true,\r\n        \"columnDefs\": columnDefs,\r\n        \"createdRow\": function( row, data, dataIndex ) {\r\n            if (data['type'] === 'Heading') {\r\n                $(row).addClass( 'bg-primary' );\r\n            }\r\n            if (data['type'] === 'Information') {\r\n                $(row).addClass( 'table-info' );\r\n            }\r\n            if (data['type'] === 'Requirement') {\r\n                $(row).addClass( 'table-warning' );\r\n            }\r\n            if (data['type'] === 'not set') {\r\n                $(row).addClass( 'table-light');\r\n            }\r\n        },\r\n        \"infoCallback\": function( settings, start, end, max, total, pre ) {\r\n            var api = this.api();\r\n            var pageInfo = api.page.info();\r\n\r\n            $('#clear-all-filters-text').html(\"Showing \" + total +\"/\"+ pageInfo.recordsTotal + \". Clear all.\");\r\n\r\n            let result = \"Showing \" + start + \" to \" + end + \" of \" + total + \" entries\";\r\n            result += \" (filtered from \" + pageInfo.recordsTotal + \" total entries).\";\r\n\r\n            return result;\r\n        },\r\n        \"initComplete\" : function() {\r\n            $('#search_bar').val(req_search_string);\r\n            $('#type-filter-input').val(filter_type_string);\r\n            $('#tag-filter-input').val(filter_tag_string);\r\n            $('#status-filter-input').val(filter_status_string);\r\n\r\n            bind_requirement_id_to_modals(requirements_table);\r\n            init_datatable_manipulators(requirements_table);\r\n\r\n            process_url_query(get_query);\r\n            update_search();\r\n            update_filter();\r\n\r\n            // Enable Hanfor specific requirements table filtering.\r\n            $.fn.dataTable.ext.search.push(\r\n                function( settings, data, dataIndex ) {\r\n                    // data contains the row. data[0] is the content of the first column in the actual row.\r\n                    // Return true to include the row into the data. false to exclude.\r\n                    return evaluate_search(data);\r\n                }\r\n            );\r\n\r\n            this.api().draw();\r\n        }\r\n    });\r\n}\r\n\r\n\r\n/**\r\n * Get the color for a tag\r\n */\r\nfunction get_tag_color(tag_name){\r\n    return tag_colors.hasOwnProperty(tag_name) ? tag_colors[tag_name] : '#5bc0de';\r\n}\r\n\r\n\r\n/**\r\n * Load available guesses into the modal.\r\n */\r\nfunction fetch_available_guesses() {\r\n    let modal = $('#requirement_guess_modal');\r\n    let available_guesses_cards = $('#available_guesses_cards');\r\n    let modal_content = $('.modal-content');\r\n    let requirement_id = $('#requirement_id').val();\r\n\r\n    modal.modal({\r\n        keyboard: false\r\n    });\r\n    modal.modal('show');\r\n    modal_content.LoadingOverlay('show');\r\n    available_guesses_cards.html('');\r\n\r\n    function add_available_guess(guess) {\r\n        let template = '<div id=\"available_guesses_cards\" >' +\r\n            '                <div class=\"card\">' +\r\n            '                    <div class=\"pl-1 pr-1\">' +\r\n            '                        <p>'+\r\n            guess['string'] +\r\n            '                        </p>' +\r\n            '                    </div>' +\r\n            '                    <button type=\"button\" class=\"btn btn-success btn-sm add_guess\"' +\r\n            '                            title=\"Add formalization\"' +\r\n            '                            data-scope=\"' + guess['scope'] + '\"' +\r\n            '                            data-pattern=\"' + guess['pattern'] + '\"' +\r\n            '                            data-mapping=\\'' + JSON.stringify(guess['mapping']) + '\\'>' +\r\n            '                        <strong>+ Add this formalization +</strong>' +\r\n            '                    </button>' +\r\n            '                </div>' +\r\n            '            </div>';\r\n        available_guesses_cards.append(template);\r\n    }\r\n\r\n    $.post( \"api/req/get_available_guesses\",\r\n        {\r\n            requirement_id: requirement_id\r\n        },\r\n        function (data) {\r\n            if (data['success'] === false) {\r\n                alert(data['errormsg'])\r\n            } else {\r\n                for (let i = 0; i < data['available_guesses'].length; i++) {\r\n                    add_available_guess(data['available_guesses'][i]);\r\n                }\r\n            }\r\n    }).done(function () {\r\n        $('.add_guess').click(function () {\r\n            add_formalization_from_guess($(this).data('scope'), $(this).data('pattern'), $(this).data('mapping'));\r\n        });\r\n        modal_content.LoadingOverlay('hide', true);\r\n    });\r\n}\r\n\r\n\r\n/**\r\n * Load requirements datatable definitions. Trigger build of a fresh requirement datatable.\r\n */\r\nfunction load_datatable(){\r\n    // Initialize the Column defs.\r\n    // First set the static colum definitions.\r\n    let columnDefs = [\r\n        {\r\n            \"orderable\": false,\r\n            \"className\": 'select-checkbox',\r\n            \"targets\": [0],\r\n            \"data\": null,\r\n            \"defaultContent\": \"\"\r\n        },\r\n        {\r\n            \"targets\": [1],\r\n            \"data\": \"pos\"\r\n        },\r\n        {\r\n            \"targets\": [2],\r\n            \"data\": \"id\",\r\n            \"render\": function (data, type, row, meta) {\r\n                result = '<a href=\"#\">' + data + '</a>';\r\n                return result;\r\n            }\r\n        },\r\n        {\r\n            \"targets\": [3],\r\n            \"data\": \"desc\"\r\n        },\r\n        {\r\n            \"targets\": [4],\r\n            \"data\": \"type\",\r\n            \"render\": function (data, type, row, meta) {\r\n                if (available_types.indexOf(data) <= -1) {\r\n                    available_types.push(data);\r\n                }\r\n                return data;\r\n            }\r\n        },\r\n        {\r\n            \"targets\": [5],\r\n            \"data\": \"tags\",\r\n            \"render\": function (data, type, row, meta) {\r\n                result = '';\r\n                $(data).each(function (id, tag) {\r\n                    if (tag.length > 0) {\r\n                        result += '<span class=\"badge\" style=\"background-color: ' + get_tag_color(tag) + '\">' +\r\n                            tag + '</span></br>';\r\n                        // Add tag to available tags\r\n                        if (available_tags.indexOf(tag) <= -1) {\r\n                            available_tags.push(tag);\r\n                        }\r\n                    }\r\n                });\r\n                if (row.formal.length > 0) {\r\n                    result += '<span class=\"badge badge-success\">has_formalization</span></br>';\r\n                }\r\n                return result;\r\n            }\r\n\r\n        },\r\n        {\r\n            \"targets\": [6],\r\n            \"data\": \"status\",\r\n            \"render\": function (data, type, row, meta) {\r\n                result = '<span class=\"badge badge-info\">' + data + '</span></br>';\r\n                return result;\r\n            }\r\n        },\r\n        {\r\n            \"targets\": [7],\r\n            \"data\": \"formal\",\r\n            \"render\": function (data, type, row, meta) {\r\n                result = '';\r\n                if (row.formal.length > 0) {\r\n                    $(data).each(function (id, formalization) {\r\n                        if (formalization.length > 0) {\r\n                            result += '<p>' + formalization + '</p>';\r\n                        }\r\n                    });\r\n                }\r\n                return result;\r\n            }\r\n        }\r\n    ];\r\n    // Load generic colums.\r\n    $.get( \"api/table/colum_defs\", '', function (data) {\r\n        const dataLength = data['col_defs'].length;\r\n        for (let i = 0; i < dataLength; i++) {\r\n            columnDefs.push(\r\n            {\r\n                \"targets\": [parseInt(data['col_defs'][i]['target'])],\r\n                \"data\": data['col_defs'][i]['csv_name'],\r\n                \"visible\": false,\r\n                \"searchable\": true\r\n            });\r\n        }\r\n    }).done(function () {\r\n            init_datatable(columnDefs);\r\n    });\r\n}\r\n\r\n/**\r\n * Handle requirement modal hiding event.\r\n * Prevent hiding on unsaved changes by asking user feedback (discard, save, back to edit).\r\n * @param event | the modal hiding event.\r\n */\r\nfunction modal_closing_routine(event) {\r\n    const unsaved_changes = $('#requirement_modal').data('unsaved_changes');\r\n    if (unsaved_changes === true) {\r\n        const force_close = confirm(\"You have unsaved changes, do you really want to close?\");\r\n        if (force_close !== true) {\r\n            event.preventDefault();\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Initialize the requirement modal behaviour.\r\n */\r\nfunction init_modal() {\r\n    let requirement_modal = $('#requirement_modal');\r\n    // Initialize tag autocomplete filed in the requirements modal.\r\n    $('#requirement_tag_field')\r\n        .tokenfield({\r\n            autocomplete: {\r\n                source: available_tags,\r\n                delay: 100\r\n            },\r\n            showAutocompleteOnFocus: true\r\n        })\r\n        .change(function (e) {\r\n            requirement_modal.data('unsaved_changes', true);\r\n        });\r\n\r\n    $('#requirement_status').change(function() {\r\n        $('#requirement_modal').data('unsaved_changes', true);\r\n    });\r\n\r\n    requirement_modal.on('hide.bs.modal', function (event) {\r\n        modal_closing_routine(event);\r\n    });\r\n\r\n    // Handle ESC key\r\n    $(document).keyup(function(e) {\r\n        // If modal is open and ESC pressed (ESC maps to keyCode \"27\")\r\n        if ($('.modal:visible').length && e.keyCode === 27){\r\n            let focused_input = $('input[type=text], textarea, select').filter(\":focus\");\r\n            // If no input elements in focus => Close modal.\r\n            if (focused_input.length === 0) {\r\n                // First hide the autoguess modal\r\n                if($('#requirement_guess_modal:visible').length){\r\n                    $('#requirement_guess_modal').modal('hide');\r\n                } else {\r\n                    $('#requirement_modal').modal('hide');\r\n                }\r\n            } else {\r\n                // Defocus input elements.\r\n                focused_input.each(function( index ) {\r\n                    $( this ).blur();\r\n                });\r\n            }\r\n        }\r\n    });\r\n\r\n    // Clear the Modal after closing modal.\r\n    // In case of stacked modals and on modal closing:\r\n    // Prevent removal of modal-open class from body if a modal remains. This will keep the scrollbar intact.\r\n    requirement_modal.on('hidden.bs.modal', function (e) {\r\n        $('#requirement_tag_field').val('');\r\n        $('#requirement_tag_field-tokenfield').val('');\r\n    });\r\n\r\n    // Listener for adding new formalizations.\r\n    $('#add_formalization').click(function () {\r\n        add_formalization();\r\n    });\r\n\r\n    // Listener for adding new geussed formalizations.\r\n    $('#add_gussed_formalization').click(function () {\r\n        fetch_available_guesses();\r\n    });\r\n\r\n    $(\".modal\").on('hidden.bs.modal', function (event) {\r\n        if ($('.modal:visible').length) {\r\n            $('body').addClass('modal-open');\r\n        }\r\n    });\r\n\r\n    // Initialize variables.\r\n    update_vars();\r\n}\r\n\r\n\r\n/**\r\n * Load the hanfor frontend meta settings.\r\n */\r\nfunction load_meta_settings() {\r\n    $.get( \"api/meta/get\", '', function (data) {\r\n        tag_colors = data['tag_colors'];\r\n    });\r\n}\r\n\r\n\r\n/**\r\n * Find the datatable row index for a requirement by its requirement id.\r\n * @param {number} rid the requirement id.\r\n * @returns {number} row_index the datatables row index.\r\n */\r\nfunction get_rowidx_by_reqid(rid) {\r\n    let requirement_table = $('#requirements_table').DataTable();\r\n    let result = -1;\r\n    let filteredData = requirement_table\r\n        .column( 2 )\r\n        .data()\r\n        .filter( function ( value, index ) {\r\n            if (value === rid) {\r\n                result = index;\r\n                return true;\r\n            }\r\n            return false;\r\n        } );\r\n\r\n    return result;\r\n}\r\n\r\n\r\n/**\r\n * Refresh the hanfor frontend logs.\r\n */\r\nfunction update_logs() {\r\n    $.get( \"api/logs/get\", '', function (data) {\r\n        $('#log_textarea').html(data);\r\n    }).done(function () {\r\n        // Bind direct requirement links to load the modal.\r\n        $('.req_direct_link').click( function () {\r\n            load_requirement(get_rowidx_by_reqid($(this).data(\"rid\")));\r\n        });\r\n        $('#log_textarea').scrollTop( 100000 );\r\n    });\r\n}\r\n\r\n/**\r\n * Start the app.\r\n */\r\n$(document).ready(function() {\r\n    load_meta_settings();\r\n    load_datatable();\r\n    init_modal();\r\n    update_logs();\r\n});\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./js/requirements.js\n");

/***/ }),

/***/ "./node_modules/jquery-ui/ui/effect.js":
/*!*********************************************!*\
  !*** ./node_modules/jquery-ui/ui/effect.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n * jQuery UI Effects 1.12.1\n * http://jqueryui.com\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n */\n\n//>>label: Effects Core\n//>>group: Effects\n// jscs:disable maximumLineLength\n//>>description: Extends the internal jQuery effects. Includes morphing and easing. Required by all other effects.\n// jscs:enable maximumLineLength\n//>>docs: http://api.jqueryui.com/category/effects-core/\n//>>demos: http://jqueryui.com/effect/\n\n( function( factory ) {\n\tif ( true ) {\n\n\t\t// AMD. Register as an anonymous module.\n\t\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\"), __webpack_require__(/*! ./version */ \"./node_modules/jquery-ui/ui/version.js\") ], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t} else {}\n}( function( $ ) {\n\nvar dataSpace = \"ui-effects-\",\n\tdataSpaceStyle = \"ui-effects-style\",\n\tdataSpaceAnimated = \"ui-effects-animated\",\n\n\t// Create a local jQuery because jQuery Color relies on it and the\n\t// global may not exist with AMD and a custom build (#10199)\n\tjQuery = $;\n\n$.effects = {\n\teffect: {}\n};\n\n/*!\n * jQuery Color Animations v2.1.2\n * https://github.com/jquery/jquery-color\n *\n * Copyright 2014 jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n *\n * Date: Wed Jan 16 08:47:09 2013 -0600\n */\n( function( jQuery, undefined ) {\n\n\tvar stepHooks = \"backgroundColor borderBottomColor borderLeftColor borderRightColor \" +\n\t\t\"borderTopColor color columnRuleColor outlineColor textDecorationColor textEmphasisColor\",\n\n\t// Plusequals test for += 100 -= 100\n\trplusequals = /^([\\-+])=\\s*(\\d+\\.?\\d*)/,\n\n\t// A set of RE's that can match strings and generate color tuples.\n\tstringParsers = [ {\n\t\t\tre: /rgba?\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*(?:,\\s*(\\d?(?:\\.\\d+)?)\\s*)?\\)/,\n\t\t\tparse: function( execResult ) {\n\t\t\t\treturn [\n\t\t\t\t\texecResult[ 1 ],\n\t\t\t\t\texecResult[ 2 ],\n\t\t\t\t\texecResult[ 3 ],\n\t\t\t\t\texecResult[ 4 ]\n\t\t\t\t];\n\t\t\t}\n\t\t}, {\n\t\t\tre: /rgba?\\(\\s*(\\d+(?:\\.\\d+)?)\\%\\s*,\\s*(\\d+(?:\\.\\d+)?)\\%\\s*,\\s*(\\d+(?:\\.\\d+)?)\\%\\s*(?:,\\s*(\\d?(?:\\.\\d+)?)\\s*)?\\)/,\n\t\t\tparse: function( execResult ) {\n\t\t\t\treturn [\n\t\t\t\t\texecResult[ 1 ] * 2.55,\n\t\t\t\t\texecResult[ 2 ] * 2.55,\n\t\t\t\t\texecResult[ 3 ] * 2.55,\n\t\t\t\t\texecResult[ 4 ]\n\t\t\t\t];\n\t\t\t}\n\t\t}, {\n\n\t\t\t// This regex ignores A-F because it's compared against an already lowercased string\n\t\t\tre: /#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})/,\n\t\t\tparse: function( execResult ) {\n\t\t\t\treturn [\n\t\t\t\t\tparseInt( execResult[ 1 ], 16 ),\n\t\t\t\t\tparseInt( execResult[ 2 ], 16 ),\n\t\t\t\t\tparseInt( execResult[ 3 ], 16 )\n\t\t\t\t];\n\t\t\t}\n\t\t}, {\n\n\t\t\t// This regex ignores A-F because it's compared against an already lowercased string\n\t\t\tre: /#([a-f0-9])([a-f0-9])([a-f0-9])/,\n\t\t\tparse: function( execResult ) {\n\t\t\t\treturn [\n\t\t\t\t\tparseInt( execResult[ 1 ] + execResult[ 1 ], 16 ),\n\t\t\t\t\tparseInt( execResult[ 2 ] + execResult[ 2 ], 16 ),\n\t\t\t\t\tparseInt( execResult[ 3 ] + execResult[ 3 ], 16 )\n\t\t\t\t];\n\t\t\t}\n\t\t}, {\n\t\t\tre: /hsla?\\(\\s*(\\d+(?:\\.\\d+)?)\\s*,\\s*(\\d+(?:\\.\\d+)?)\\%\\s*,\\s*(\\d+(?:\\.\\d+)?)\\%\\s*(?:,\\s*(\\d?(?:\\.\\d+)?)\\s*)?\\)/,\n\t\t\tspace: \"hsla\",\n\t\t\tparse: function( execResult ) {\n\t\t\t\treturn [\n\t\t\t\t\texecResult[ 1 ],\n\t\t\t\t\texecResult[ 2 ] / 100,\n\t\t\t\t\texecResult[ 3 ] / 100,\n\t\t\t\t\texecResult[ 4 ]\n\t\t\t\t];\n\t\t\t}\n\t\t} ],\n\n\t// JQuery.Color( )\n\tcolor = jQuery.Color = function( color, green, blue, alpha ) {\n\t\treturn new jQuery.Color.fn.parse( color, green, blue, alpha );\n\t},\n\tspaces = {\n\t\trgba: {\n\t\t\tprops: {\n\t\t\t\tred: {\n\t\t\t\t\tidx: 0,\n\t\t\t\t\ttype: \"byte\"\n\t\t\t\t},\n\t\t\t\tgreen: {\n\t\t\t\t\tidx: 1,\n\t\t\t\t\ttype: \"byte\"\n\t\t\t\t},\n\t\t\t\tblue: {\n\t\t\t\t\tidx: 2,\n\t\t\t\t\ttype: \"byte\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\thsla: {\n\t\t\tprops: {\n\t\t\t\thue: {\n\t\t\t\t\tidx: 0,\n\t\t\t\t\ttype: \"degrees\"\n\t\t\t\t},\n\t\t\t\tsaturation: {\n\t\t\t\t\tidx: 1,\n\t\t\t\t\ttype: \"percent\"\n\t\t\t\t},\n\t\t\t\tlightness: {\n\t\t\t\t\tidx: 2,\n\t\t\t\t\ttype: \"percent\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\tpropTypes = {\n\t\t\"byte\": {\n\t\t\tfloor: true,\n\t\t\tmax: 255\n\t\t},\n\t\t\"percent\": {\n\t\t\tmax: 1\n\t\t},\n\t\t\"degrees\": {\n\t\t\tmod: 360,\n\t\t\tfloor: true\n\t\t}\n\t},\n\tsupport = color.support = {},\n\n\t// Element for support tests\n\tsupportElem = jQuery( \"<p>\" )[ 0 ],\n\n\t// Colors = jQuery.Color.names\n\tcolors,\n\n\t// Local aliases of functions called often\n\teach = jQuery.each;\n\n// Determine rgba support immediately\nsupportElem.style.cssText = \"background-color:rgba(1,1,1,.5)\";\nsupport.rgba = supportElem.style.backgroundColor.indexOf( \"rgba\" ) > -1;\n\n// Define cache name and alpha properties\n// for rgba and hsla spaces\neach( spaces, function( spaceName, space ) {\n\tspace.cache = \"_\" + spaceName;\n\tspace.props.alpha = {\n\t\tidx: 3,\n\t\ttype: \"percent\",\n\t\tdef: 1\n\t};\n} );\n\nfunction clamp( value, prop, allowEmpty ) {\n\tvar type = propTypes[ prop.type ] || {};\n\n\tif ( value == null ) {\n\t\treturn ( allowEmpty || !prop.def ) ? null : prop.def;\n\t}\n\n\t// ~~ is an short way of doing floor for positive numbers\n\tvalue = type.floor ? ~~value : parseFloat( value );\n\n\t// IE will pass in empty strings as value for alpha,\n\t// which will hit this case\n\tif ( isNaN( value ) ) {\n\t\treturn prop.def;\n\t}\n\n\tif ( type.mod ) {\n\n\t\t// We add mod before modding to make sure that negatives values\n\t\t// get converted properly: -10 -> 350\n\t\treturn ( value + type.mod ) % type.mod;\n\t}\n\n\t// For now all property types without mod have min and max\n\treturn 0 > value ? 0 : type.max < value ? type.max : value;\n}\n\nfunction stringParse( string ) {\n\tvar inst = color(),\n\t\trgba = inst._rgba = [];\n\n\tstring = string.toLowerCase();\n\n\teach( stringParsers, function( i, parser ) {\n\t\tvar parsed,\n\t\t\tmatch = parser.re.exec( string ),\n\t\t\tvalues = match && parser.parse( match ),\n\t\t\tspaceName = parser.space || \"rgba\";\n\n\t\tif ( values ) {\n\t\t\tparsed = inst[ spaceName ]( values );\n\n\t\t\t// If this was an rgba parse the assignment might happen twice\n\t\t\t// oh well....\n\t\t\tinst[ spaces[ spaceName ].cache ] = parsed[ spaces[ spaceName ].cache ];\n\t\t\trgba = inst._rgba = parsed._rgba;\n\n\t\t\t// Exit each( stringParsers ) here because we matched\n\t\t\treturn false;\n\t\t}\n\t} );\n\n\t// Found a stringParser that handled it\n\tif ( rgba.length ) {\n\n\t\t// If this came from a parsed string, force \"transparent\" when alpha is 0\n\t\t// chrome, (and maybe others) return \"transparent\" as rgba(0,0,0,0)\n\t\tif ( rgba.join() === \"0,0,0,0\" ) {\n\t\t\tjQuery.extend( rgba, colors.transparent );\n\t\t}\n\t\treturn inst;\n\t}\n\n\t// Named colors\n\treturn colors[ string ];\n}\n\ncolor.fn = jQuery.extend( color.prototype, {\n\tparse: function( red, green, blue, alpha ) {\n\t\tif ( red === undefined ) {\n\t\t\tthis._rgba = [ null, null, null, null ];\n\t\t\treturn this;\n\t\t}\n\t\tif ( red.jquery || red.nodeType ) {\n\t\t\tred = jQuery( red ).css( green );\n\t\t\tgreen = undefined;\n\t\t}\n\n\t\tvar inst = this,\n\t\t\ttype = jQuery.type( red ),\n\t\t\trgba = this._rgba = [];\n\n\t\t// More than 1 argument specified - assume ( red, green, blue, alpha )\n\t\tif ( green !== undefined ) {\n\t\t\tred = [ red, green, blue, alpha ];\n\t\t\ttype = \"array\";\n\t\t}\n\n\t\tif ( type === \"string\" ) {\n\t\t\treturn this.parse( stringParse( red ) || colors._default );\n\t\t}\n\n\t\tif ( type === \"array\" ) {\n\t\t\teach( spaces.rgba.props, function( key, prop ) {\n\t\t\t\trgba[ prop.idx ] = clamp( red[ prop.idx ], prop );\n\t\t\t} );\n\t\t\treturn this;\n\t\t}\n\n\t\tif ( type === \"object\" ) {\n\t\t\tif ( red instanceof color ) {\n\t\t\t\teach( spaces, function( spaceName, space ) {\n\t\t\t\t\tif ( red[ space.cache ] ) {\n\t\t\t\t\t\tinst[ space.cache ] = red[ space.cache ].slice();\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t} else {\n\t\t\t\teach( spaces, function( spaceName, space ) {\n\t\t\t\t\tvar cache = space.cache;\n\t\t\t\t\teach( space.props, function( key, prop ) {\n\n\t\t\t\t\t\t// If the cache doesn't exist, and we know how to convert\n\t\t\t\t\t\tif ( !inst[ cache ] && space.to ) {\n\n\t\t\t\t\t\t\t// If the value was null, we don't need to copy it\n\t\t\t\t\t\t\t// if the key was alpha, we don't need to copy it either\n\t\t\t\t\t\t\tif ( key === \"alpha\" || red[ key ] == null ) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tinst[ cache ] = space.to( inst._rgba );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// This is the only case where we allow nulls for ALL properties.\n\t\t\t\t\t\t// call clamp with alwaysAllowEmpty\n\t\t\t\t\t\tinst[ cache ][ prop.idx ] = clamp( red[ key ], prop, true );\n\t\t\t\t\t} );\n\n\t\t\t\t\t// Everything defined but alpha?\n\t\t\t\t\tif ( inst[ cache ] &&\n\t\t\t\t\t\t\tjQuery.inArray( null, inst[ cache ].slice( 0, 3 ) ) < 0 ) {\n\n\t\t\t\t\t\t// Use the default of 1\n\t\t\t\t\t\tinst[ cache ][ 3 ] = 1;\n\t\t\t\t\t\tif ( space.from ) {\n\t\t\t\t\t\t\tinst._rgba = space.from( inst[ cache ] );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\t},\n\tis: function( compare ) {\n\t\tvar is = color( compare ),\n\t\t\tsame = true,\n\t\t\tinst = this;\n\n\t\teach( spaces, function( _, space ) {\n\t\t\tvar localCache,\n\t\t\t\tisCache = is[ space.cache ];\n\t\t\tif ( isCache ) {\n\t\t\t\tlocalCache = inst[ space.cache ] || space.to && space.to( inst._rgba ) || [];\n\t\t\t\teach( space.props, function( _, prop ) {\n\t\t\t\t\tif ( isCache[ prop.idx ] != null ) {\n\t\t\t\t\t\tsame = ( isCache[ prop.idx ] === localCache[ prop.idx ] );\n\t\t\t\t\t\treturn same;\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\t\t\treturn same;\n\t\t} );\n\t\treturn same;\n\t},\n\t_space: function() {\n\t\tvar used = [],\n\t\t\tinst = this;\n\t\teach( spaces, function( spaceName, space ) {\n\t\t\tif ( inst[ space.cache ] ) {\n\t\t\t\tused.push( spaceName );\n\t\t\t}\n\t\t} );\n\t\treturn used.pop();\n\t},\n\ttransition: function( other, distance ) {\n\t\tvar end = color( other ),\n\t\t\tspaceName = end._space(),\n\t\t\tspace = spaces[ spaceName ],\n\t\t\tstartColor = this.alpha() === 0 ? color( \"transparent\" ) : this,\n\t\t\tstart = startColor[ space.cache ] || space.to( startColor._rgba ),\n\t\t\tresult = start.slice();\n\n\t\tend = end[ space.cache ];\n\t\teach( space.props, function( key, prop ) {\n\t\t\tvar index = prop.idx,\n\t\t\t\tstartValue = start[ index ],\n\t\t\t\tendValue = end[ index ],\n\t\t\t\ttype = propTypes[ prop.type ] || {};\n\n\t\t\t// If null, don't override start value\n\t\t\tif ( endValue === null ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If null - use end\n\t\t\tif ( startValue === null ) {\n\t\t\t\tresult[ index ] = endValue;\n\t\t\t} else {\n\t\t\t\tif ( type.mod ) {\n\t\t\t\t\tif ( endValue - startValue > type.mod / 2 ) {\n\t\t\t\t\t\tstartValue += type.mod;\n\t\t\t\t\t} else if ( startValue - endValue > type.mod / 2 ) {\n\t\t\t\t\t\tstartValue -= type.mod;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tresult[ index ] = clamp( ( endValue - startValue ) * distance + startValue, prop );\n\t\t\t}\n\t\t} );\n\t\treturn this[ spaceName ]( result );\n\t},\n\tblend: function( opaque ) {\n\n\t\t// If we are already opaque - return ourself\n\t\tif ( this._rgba[ 3 ] === 1 ) {\n\t\t\treturn this;\n\t\t}\n\n\t\tvar rgb = this._rgba.slice(),\n\t\t\ta = rgb.pop(),\n\t\t\tblend = color( opaque )._rgba;\n\n\t\treturn color( jQuery.map( rgb, function( v, i ) {\n\t\t\treturn ( 1 - a ) * blend[ i ] + a * v;\n\t\t} ) );\n\t},\n\ttoRgbaString: function() {\n\t\tvar prefix = \"rgba(\",\n\t\t\trgba = jQuery.map( this._rgba, function( v, i ) {\n\t\t\t\treturn v == null ? ( i > 2 ? 1 : 0 ) : v;\n\t\t\t} );\n\n\t\tif ( rgba[ 3 ] === 1 ) {\n\t\t\trgba.pop();\n\t\t\tprefix = \"rgb(\";\n\t\t}\n\n\t\treturn prefix + rgba.join() + \")\";\n\t},\n\ttoHslaString: function() {\n\t\tvar prefix = \"hsla(\",\n\t\t\thsla = jQuery.map( this.hsla(), function( v, i ) {\n\t\t\t\tif ( v == null ) {\n\t\t\t\t\tv = i > 2 ? 1 : 0;\n\t\t\t\t}\n\n\t\t\t\t// Catch 1 and 2\n\t\t\t\tif ( i && i < 3 ) {\n\t\t\t\t\tv = Math.round( v * 100 ) + \"%\";\n\t\t\t\t}\n\t\t\t\treturn v;\n\t\t\t} );\n\n\t\tif ( hsla[ 3 ] === 1 ) {\n\t\t\thsla.pop();\n\t\t\tprefix = \"hsl(\";\n\t\t}\n\t\treturn prefix + hsla.join() + \")\";\n\t},\n\ttoHexString: function( includeAlpha ) {\n\t\tvar rgba = this._rgba.slice(),\n\t\t\talpha = rgba.pop();\n\n\t\tif ( includeAlpha ) {\n\t\t\trgba.push( ~~( alpha * 255 ) );\n\t\t}\n\n\t\treturn \"#\" + jQuery.map( rgba, function( v ) {\n\n\t\t\t// Default to 0 when nulls exist\n\t\t\tv = ( v || 0 ).toString( 16 );\n\t\t\treturn v.length === 1 ? \"0\" + v : v;\n\t\t} ).join( \"\" );\n\t},\n\ttoString: function() {\n\t\treturn this._rgba[ 3 ] === 0 ? \"transparent\" : this.toRgbaString();\n\t}\n} );\ncolor.fn.parse.prototype = color.fn;\n\n// Hsla conversions adapted from:\n// https://code.google.com/p/maashaack/source/browse/packages/graphics/trunk/src/graphics/colors/HUE2RGB.as?r=5021\n\nfunction hue2rgb( p, q, h ) {\n\th = ( h + 1 ) % 1;\n\tif ( h * 6 < 1 ) {\n\t\treturn p + ( q - p ) * h * 6;\n\t}\n\tif ( h * 2 < 1 ) {\n\t\treturn q;\n\t}\n\tif ( h * 3 < 2 ) {\n\t\treturn p + ( q - p ) * ( ( 2 / 3 ) - h ) * 6;\n\t}\n\treturn p;\n}\n\nspaces.hsla.to = function( rgba ) {\n\tif ( rgba[ 0 ] == null || rgba[ 1 ] == null || rgba[ 2 ] == null ) {\n\t\treturn [ null, null, null, rgba[ 3 ] ];\n\t}\n\tvar r = rgba[ 0 ] / 255,\n\t\tg = rgba[ 1 ] / 255,\n\t\tb = rgba[ 2 ] / 255,\n\t\ta = rgba[ 3 ],\n\t\tmax = Math.max( r, g, b ),\n\t\tmin = Math.min( r, g, b ),\n\t\tdiff = max - min,\n\t\tadd = max + min,\n\t\tl = add * 0.5,\n\t\th, s;\n\n\tif ( min === max ) {\n\t\th = 0;\n\t} else if ( r === max ) {\n\t\th = ( 60 * ( g - b ) / diff ) + 360;\n\t} else if ( g === max ) {\n\t\th = ( 60 * ( b - r ) / diff ) + 120;\n\t} else {\n\t\th = ( 60 * ( r - g ) / diff ) + 240;\n\t}\n\n\t// Chroma (diff) == 0 means greyscale which, by definition, saturation = 0%\n\t// otherwise, saturation is based on the ratio of chroma (diff) to lightness (add)\n\tif ( diff === 0 ) {\n\t\ts = 0;\n\t} else if ( l <= 0.5 ) {\n\t\ts = diff / add;\n\t} else {\n\t\ts = diff / ( 2 - add );\n\t}\n\treturn [ Math.round( h ) % 360, s, l, a == null ? 1 : a ];\n};\n\nspaces.hsla.from = function( hsla ) {\n\tif ( hsla[ 0 ] == null || hsla[ 1 ] == null || hsla[ 2 ] == null ) {\n\t\treturn [ null, null, null, hsla[ 3 ] ];\n\t}\n\tvar h = hsla[ 0 ] / 360,\n\t\ts = hsla[ 1 ],\n\t\tl = hsla[ 2 ],\n\t\ta = hsla[ 3 ],\n\t\tq = l <= 0.5 ? l * ( 1 + s ) : l + s - l * s,\n\t\tp = 2 * l - q;\n\n\treturn [\n\t\tMath.round( hue2rgb( p, q, h + ( 1 / 3 ) ) * 255 ),\n\t\tMath.round( hue2rgb( p, q, h ) * 255 ),\n\t\tMath.round( hue2rgb( p, q, h - ( 1 / 3 ) ) * 255 ),\n\t\ta\n\t];\n};\n\neach( spaces, function( spaceName, space ) {\n\tvar props = space.props,\n\t\tcache = space.cache,\n\t\tto = space.to,\n\t\tfrom = space.from;\n\n\t// Makes rgba() and hsla()\n\tcolor.fn[ spaceName ] = function( value ) {\n\n\t\t// Generate a cache for this space if it doesn't exist\n\t\tif ( to && !this[ cache ] ) {\n\t\t\tthis[ cache ] = to( this._rgba );\n\t\t}\n\t\tif ( value === undefined ) {\n\t\t\treturn this[ cache ].slice();\n\t\t}\n\n\t\tvar ret,\n\t\t\ttype = jQuery.type( value ),\n\t\t\tarr = ( type === \"array\" || type === \"object\" ) ? value : arguments,\n\t\t\tlocal = this[ cache ].slice();\n\n\t\teach( props, function( key, prop ) {\n\t\t\tvar val = arr[ type === \"object\" ? key : prop.idx ];\n\t\t\tif ( val == null ) {\n\t\t\t\tval = local[ prop.idx ];\n\t\t\t}\n\t\t\tlocal[ prop.idx ] = clamp( val, prop );\n\t\t} );\n\n\t\tif ( from ) {\n\t\t\tret = color( from( local ) );\n\t\t\tret[ cache ] = local;\n\t\t\treturn ret;\n\t\t} else {\n\t\t\treturn color( local );\n\t\t}\n\t};\n\n\t// Makes red() green() blue() alpha() hue() saturation() lightness()\n\teach( props, function( key, prop ) {\n\n\t\t// Alpha is included in more than one space\n\t\tif ( color.fn[ key ] ) {\n\t\t\treturn;\n\t\t}\n\t\tcolor.fn[ key ] = function( value ) {\n\t\t\tvar vtype = jQuery.type( value ),\n\t\t\t\tfn = ( key === \"alpha\" ? ( this._hsla ? \"hsla\" : \"rgba\" ) : spaceName ),\n\t\t\t\tlocal = this[ fn ](),\n\t\t\t\tcur = local[ prop.idx ],\n\t\t\t\tmatch;\n\n\t\t\tif ( vtype === \"undefined\" ) {\n\t\t\t\treturn cur;\n\t\t\t}\n\n\t\t\tif ( vtype === \"function\" ) {\n\t\t\t\tvalue = value.call( this, cur );\n\t\t\t\tvtype = jQuery.type( value );\n\t\t\t}\n\t\t\tif ( value == null && prop.empty ) {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t\tif ( vtype === \"string\" ) {\n\t\t\t\tmatch = rplusequals.exec( value );\n\t\t\t\tif ( match ) {\n\t\t\t\t\tvalue = cur + parseFloat( match[ 2 ] ) * ( match[ 1 ] === \"+\" ? 1 : -1 );\n\t\t\t\t}\n\t\t\t}\n\t\t\tlocal[ prop.idx ] = value;\n\t\t\treturn this[ fn ]( local );\n\t\t};\n\t} );\n} );\n\n// Add cssHook and .fx.step function for each named hook.\n// accept a space separated string of properties\ncolor.hook = function( hook ) {\n\tvar hooks = hook.split( \" \" );\n\teach( hooks, function( i, hook ) {\n\t\tjQuery.cssHooks[ hook ] = {\n\t\t\tset: function( elem, value ) {\n\t\t\t\tvar parsed, curElem,\n\t\t\t\t\tbackgroundColor = \"\";\n\n\t\t\t\tif ( value !== \"transparent\" && ( jQuery.type( value ) !== \"string\" ||\n\t\t\t\t\t\t( parsed = stringParse( value ) ) ) ) {\n\t\t\t\t\tvalue = color( parsed || value );\n\t\t\t\t\tif ( !support.rgba && value._rgba[ 3 ] !== 1 ) {\n\t\t\t\t\t\tcurElem = hook === \"backgroundColor\" ? elem.parentNode : elem;\n\t\t\t\t\t\twhile (\n\t\t\t\t\t\t\t( backgroundColor === \"\" || backgroundColor === \"transparent\" ) &&\n\t\t\t\t\t\t\tcurElem && curElem.style\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tbackgroundColor = jQuery.css( curElem, \"backgroundColor\" );\n\t\t\t\t\t\t\t\tcurElem = curElem.parentNode;\n\t\t\t\t\t\t\t} catch ( e ) {\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvalue = value.blend( backgroundColor && backgroundColor !== \"transparent\" ?\n\t\t\t\t\t\t\tbackgroundColor :\n\t\t\t\t\t\t\t\"_default\" );\n\t\t\t\t\t}\n\n\t\t\t\t\tvalue = value.toRgbaString();\n\t\t\t\t}\n\t\t\t\ttry {\n\t\t\t\t\telem.style[ hook ] = value;\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t// Wrapped to prevent IE from throwing errors on \"invalid\" values like\n\t\t\t\t\t// 'auto' or 'inherit'\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tjQuery.fx.step[ hook ] = function( fx ) {\n\t\t\tif ( !fx.colorInit ) {\n\t\t\t\tfx.start = color( fx.elem, hook );\n\t\t\t\tfx.end = color( fx.end );\n\t\t\t\tfx.colorInit = true;\n\t\t\t}\n\t\t\tjQuery.cssHooks[ hook ].set( fx.elem, fx.start.transition( fx.end, fx.pos ) );\n\t\t};\n\t} );\n\n};\n\ncolor.hook( stepHooks );\n\njQuery.cssHooks.borderColor = {\n\texpand: function( value ) {\n\t\tvar expanded = {};\n\n\t\teach( [ \"Top\", \"Right\", \"Bottom\", \"Left\" ], function( i, part ) {\n\t\t\texpanded[ \"border\" + part + \"Color\" ] = value;\n\t\t} );\n\t\treturn expanded;\n\t}\n};\n\n// Basic color names only.\n// Usage of any of the other color names requires adding yourself or including\n// jquery.color.svg-names.js.\ncolors = jQuery.Color.names = {\n\n\t// 4.1. Basic color keywords\n\taqua: \"#00ffff\",\n\tblack: \"#000000\",\n\tblue: \"#0000ff\",\n\tfuchsia: \"#ff00ff\",\n\tgray: \"#808080\",\n\tgreen: \"#008000\",\n\tlime: \"#00ff00\",\n\tmaroon: \"#800000\",\n\tnavy: \"#000080\",\n\tolive: \"#808000\",\n\tpurple: \"#800080\",\n\tred: \"#ff0000\",\n\tsilver: \"#c0c0c0\",\n\tteal: \"#008080\",\n\twhite: \"#ffffff\",\n\tyellow: \"#ffff00\",\n\n\t// 4.2.3. \"transparent\" color keyword\n\ttransparent: [ null, null, null, 0 ],\n\n\t_default: \"#ffffff\"\n};\n\n} )( jQuery );\n\n/******************************************************************************/\n/****************************** CLASS ANIMATIONS ******************************/\n/******************************************************************************/\n( function() {\n\nvar classAnimationActions = [ \"add\", \"remove\", \"toggle\" ],\n\tshorthandStyles = {\n\t\tborder: 1,\n\t\tborderBottom: 1,\n\t\tborderColor: 1,\n\t\tborderLeft: 1,\n\t\tborderRight: 1,\n\t\tborderTop: 1,\n\t\tborderWidth: 1,\n\t\tmargin: 1,\n\t\tpadding: 1\n\t};\n\n$.each(\n\t[ \"borderLeftStyle\", \"borderRightStyle\", \"borderBottomStyle\", \"borderTopStyle\" ],\n\tfunction( _, prop ) {\n\t\t$.fx.step[ prop ] = function( fx ) {\n\t\t\tif ( fx.end !== \"none\" && !fx.setAttr || fx.pos === 1 && !fx.setAttr ) {\n\t\t\t\tjQuery.style( fx.elem, prop, fx.end );\n\t\t\t\tfx.setAttr = true;\n\t\t\t}\n\t\t};\n\t}\n);\n\nfunction getElementStyles( elem ) {\n\tvar key, len,\n\t\tstyle = elem.ownerDocument.defaultView ?\n\t\t\telem.ownerDocument.defaultView.getComputedStyle( elem, null ) :\n\t\t\telem.currentStyle,\n\t\tstyles = {};\n\n\tif ( style && style.length && style[ 0 ] && style[ style[ 0 ] ] ) {\n\t\tlen = style.length;\n\t\twhile ( len-- ) {\n\t\t\tkey = style[ len ];\n\t\t\tif ( typeof style[ key ] === \"string\" ) {\n\t\t\t\tstyles[ $.camelCase( key ) ] = style[ key ];\n\t\t\t}\n\t\t}\n\n\t// Support: Opera, IE <9\n\t} else {\n\t\tfor ( key in style ) {\n\t\t\tif ( typeof style[ key ] === \"string\" ) {\n\t\t\t\tstyles[ key ] = style[ key ];\n\t\t\t}\n\t\t}\n\t}\n\n\treturn styles;\n}\n\nfunction styleDifference( oldStyle, newStyle ) {\n\tvar diff = {},\n\t\tname, value;\n\n\tfor ( name in newStyle ) {\n\t\tvalue = newStyle[ name ];\n\t\tif ( oldStyle[ name ] !== value ) {\n\t\t\tif ( !shorthandStyles[ name ] ) {\n\t\t\t\tif ( $.fx.step[ name ] || !isNaN( parseFloat( value ) ) ) {\n\t\t\t\t\tdiff[ name ] = value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn diff;\n}\n\n// Support: jQuery <1.8\nif ( !$.fn.addBack ) {\n\t$.fn.addBack = function( selector ) {\n\t\treturn this.add( selector == null ?\n\t\t\tthis.prevObject : this.prevObject.filter( selector )\n\t\t);\n\t};\n}\n\n$.effects.animateClass = function( value, duration, easing, callback ) {\n\tvar o = $.speed( duration, easing, callback );\n\n\treturn this.queue( function() {\n\t\tvar animated = $( this ),\n\t\t\tbaseClass = animated.attr( \"class\" ) || \"\",\n\t\t\tapplyClassChange,\n\t\t\tallAnimations = o.children ? animated.find( \"*\" ).addBack() : animated;\n\n\t\t// Map the animated objects to store the original styles.\n\t\tallAnimations = allAnimations.map( function() {\n\t\t\tvar el = $( this );\n\t\t\treturn {\n\t\t\t\tel: el,\n\t\t\t\tstart: getElementStyles( this )\n\t\t\t};\n\t\t} );\n\n\t\t// Apply class change\n\t\tapplyClassChange = function() {\n\t\t\t$.each( classAnimationActions, function( i, action ) {\n\t\t\t\tif ( value[ action ] ) {\n\t\t\t\t\tanimated[ action + \"Class\" ]( value[ action ] );\n\t\t\t\t}\n\t\t\t} );\n\t\t};\n\t\tapplyClassChange();\n\n\t\t// Map all animated objects again - calculate new styles and diff\n\t\tallAnimations = allAnimations.map( function() {\n\t\t\tthis.end = getElementStyles( this.el[ 0 ] );\n\t\t\tthis.diff = styleDifference( this.start, this.end );\n\t\t\treturn this;\n\t\t} );\n\n\t\t// Apply original class\n\t\tanimated.attr( \"class\", baseClass );\n\n\t\t// Map all animated objects again - this time collecting a promise\n\t\tallAnimations = allAnimations.map( function() {\n\t\t\tvar styleInfo = this,\n\t\t\t\tdfd = $.Deferred(),\n\t\t\t\topts = $.extend( {}, o, {\n\t\t\t\t\tqueue: false,\n\t\t\t\t\tcomplete: function() {\n\t\t\t\t\t\tdfd.resolve( styleInfo );\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\tthis.el.animate( this.diff, opts );\n\t\t\treturn dfd.promise();\n\t\t} );\n\n\t\t// Once all animations have completed:\n\t\t$.when.apply( $, allAnimations.get() ).done( function() {\n\n\t\t\t// Set the final class\n\t\t\tapplyClassChange();\n\n\t\t\t// For each animated element,\n\t\t\t// clear all css properties that were animated\n\t\t\t$.each( arguments, function() {\n\t\t\t\tvar el = this.el;\n\t\t\t\t$.each( this.diff, function( key ) {\n\t\t\t\t\tel.css( key, \"\" );\n\t\t\t\t} );\n\t\t\t} );\n\n\t\t\t// This is guarnteed to be there if you use jQuery.speed()\n\t\t\t// it also handles dequeuing the next anim...\n\t\t\to.complete.call( animated[ 0 ] );\n\t\t} );\n\t} );\n};\n\n$.fn.extend( {\n\taddClass: ( function( orig ) {\n\t\treturn function( classNames, speed, easing, callback ) {\n\t\t\treturn speed ?\n\t\t\t\t$.effects.animateClass.call( this,\n\t\t\t\t\t{ add: classNames }, speed, easing, callback ) :\n\t\t\t\torig.apply( this, arguments );\n\t\t};\n\t} )( $.fn.addClass ),\n\n\tremoveClass: ( function( orig ) {\n\t\treturn function( classNames, speed, easing, callback ) {\n\t\t\treturn arguments.length > 1 ?\n\t\t\t\t$.effects.animateClass.call( this,\n\t\t\t\t\t{ remove: classNames }, speed, easing, callback ) :\n\t\t\t\torig.apply( this, arguments );\n\t\t};\n\t} )( $.fn.removeClass ),\n\n\ttoggleClass: ( function( orig ) {\n\t\treturn function( classNames, force, speed, easing, callback ) {\n\t\t\tif ( typeof force === \"boolean\" || force === undefined ) {\n\t\t\t\tif ( !speed ) {\n\n\t\t\t\t\t// Without speed parameter\n\t\t\t\t\treturn orig.apply( this, arguments );\n\t\t\t\t} else {\n\t\t\t\t\treturn $.effects.animateClass.call( this,\n\t\t\t\t\t\t( force ? { add: classNames } : { remove: classNames } ),\n\t\t\t\t\t\tspeed, easing, callback );\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\t// Without force parameter\n\t\t\t\treturn $.effects.animateClass.call( this,\n\t\t\t\t\t{ toggle: classNames }, force, speed, easing );\n\t\t\t}\n\t\t};\n\t} )( $.fn.toggleClass ),\n\n\tswitchClass: function( remove, add, speed, easing, callback ) {\n\t\treturn $.effects.animateClass.call( this, {\n\t\t\tadd: add,\n\t\t\tremove: remove\n\t\t}, speed, easing, callback );\n\t}\n} );\n\n} )();\n\n/******************************************************************************/\n/*********************************** EFFECTS **********************************/\n/******************************************************************************/\n\n( function() {\n\nif ( $.expr && $.expr.filters && $.expr.filters.animated ) {\n\t$.expr.filters.animated = ( function( orig ) {\n\t\treturn function( elem ) {\n\t\t\treturn !!$( elem ).data( dataSpaceAnimated ) || orig( elem );\n\t\t};\n\t} )( $.expr.filters.animated );\n}\n\nif ( $.uiBackCompat !== false ) {\n\t$.extend( $.effects, {\n\n\t\t// Saves a set of properties in a data storage\n\t\tsave: function( element, set ) {\n\t\t\tvar i = 0, length = set.length;\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tif ( set[ i ] !== null ) {\n\t\t\t\t\telement.data( dataSpace + set[ i ], element[ 0 ].style[ set[ i ] ] );\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t// Restores a set of previously saved properties from a data storage\n\t\trestore: function( element, set ) {\n\t\t\tvar val, i = 0, length = set.length;\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tif ( set[ i ] !== null ) {\n\t\t\t\t\tval = element.data( dataSpace + set[ i ] );\n\t\t\t\t\telement.css( set[ i ], val );\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tsetMode: function( el, mode ) {\n\t\t\tif ( mode === \"toggle\" ) {\n\t\t\t\tmode = el.is( \":hidden\" ) ? \"show\" : \"hide\";\n\t\t\t}\n\t\t\treturn mode;\n\t\t},\n\n\t\t// Wraps the element around a wrapper that copies position properties\n\t\tcreateWrapper: function( element ) {\n\n\t\t\t// If the element is already wrapped, return it\n\t\t\tif ( element.parent().is( \".ui-effects-wrapper\" ) ) {\n\t\t\t\treturn element.parent();\n\t\t\t}\n\n\t\t\t// Wrap the element\n\t\t\tvar props = {\n\t\t\t\t\twidth: element.outerWidth( true ),\n\t\t\t\t\theight: element.outerHeight( true ),\n\t\t\t\t\t\"float\": element.css( \"float\" )\n\t\t\t\t},\n\t\t\t\twrapper = $( \"<div></div>\" )\n\t\t\t\t\t.addClass( \"ui-effects-wrapper\" )\n\t\t\t\t\t.css( {\n\t\t\t\t\t\tfontSize: \"100%\",\n\t\t\t\t\t\tbackground: \"transparent\",\n\t\t\t\t\t\tborder: \"none\",\n\t\t\t\t\t\tmargin: 0,\n\t\t\t\t\t\tpadding: 0\n\t\t\t\t\t} ),\n\n\t\t\t\t// Store the size in case width/height are defined in % - Fixes #5245\n\t\t\t\tsize = {\n\t\t\t\t\twidth: element.width(),\n\t\t\t\t\theight: element.height()\n\t\t\t\t},\n\t\t\t\tactive = document.activeElement;\n\n\t\t\t// Support: Firefox\n\t\t\t// Firefox incorrectly exposes anonymous content\n\t\t\t// https://bugzilla.mozilla.org/show_bug.cgi?id=561664\n\t\t\ttry {\n\t\t\t\tactive.id;\n\t\t\t} catch ( e ) {\n\t\t\t\tactive = document.body;\n\t\t\t}\n\n\t\t\telement.wrap( wrapper );\n\n\t\t\t// Fixes #7595 - Elements lose focus when wrapped.\n\t\t\tif ( element[ 0 ] === active || $.contains( element[ 0 ], active ) ) {\n\t\t\t\t$( active ).trigger( \"focus\" );\n\t\t\t}\n\n\t\t\t// Hotfix for jQuery 1.4 since some change in wrap() seems to actually\n\t\t\t// lose the reference to the wrapped element\n\t\t\twrapper = element.parent();\n\n\t\t\t// Transfer positioning properties to the wrapper\n\t\t\tif ( element.css( \"position\" ) === \"static\" ) {\n\t\t\t\twrapper.css( { position: \"relative\" } );\n\t\t\t\telement.css( { position: \"relative\" } );\n\t\t\t} else {\n\t\t\t\t$.extend( props, {\n\t\t\t\t\tposition: element.css( \"position\" ),\n\t\t\t\t\tzIndex: element.css( \"z-index\" )\n\t\t\t\t} );\n\t\t\t\t$.each( [ \"top\", \"left\", \"bottom\", \"right\" ], function( i, pos ) {\n\t\t\t\t\tprops[ pos ] = element.css( pos );\n\t\t\t\t\tif ( isNaN( parseInt( props[ pos ], 10 ) ) ) {\n\t\t\t\t\t\tprops[ pos ] = \"auto\";\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t\telement.css( {\n\t\t\t\t\tposition: \"relative\",\n\t\t\t\t\ttop: 0,\n\t\t\t\t\tleft: 0,\n\t\t\t\t\tright: \"auto\",\n\t\t\t\t\tbottom: \"auto\"\n\t\t\t\t} );\n\t\t\t}\n\t\t\telement.css( size );\n\n\t\t\treturn wrapper.css( props ).show();\n\t\t},\n\n\t\tremoveWrapper: function( element ) {\n\t\t\tvar active = document.activeElement;\n\n\t\t\tif ( element.parent().is( \".ui-effects-wrapper\" ) ) {\n\t\t\t\telement.parent().replaceWith( element );\n\n\t\t\t\t// Fixes #7595 - Elements lose focus when wrapped.\n\t\t\t\tif ( element[ 0 ] === active || $.contains( element[ 0 ], active ) ) {\n\t\t\t\t\t$( active ).trigger( \"focus\" );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn element;\n\t\t}\n\t} );\n}\n\n$.extend( $.effects, {\n\tversion: \"1.12.1\",\n\n\tdefine: function( name, mode, effect ) {\n\t\tif ( !effect ) {\n\t\t\teffect = mode;\n\t\t\tmode = \"effect\";\n\t\t}\n\n\t\t$.effects.effect[ name ] = effect;\n\t\t$.effects.effect[ name ].mode = mode;\n\n\t\treturn effect;\n\t},\n\n\tscaledDimensions: function( element, percent, direction ) {\n\t\tif ( percent === 0 ) {\n\t\t\treturn {\n\t\t\t\theight: 0,\n\t\t\t\twidth: 0,\n\t\t\t\touterHeight: 0,\n\t\t\t\touterWidth: 0\n\t\t\t};\n\t\t}\n\n\t\tvar x = direction !== \"horizontal\" ? ( ( percent || 100 ) / 100 ) : 1,\n\t\t\ty = direction !== \"vertical\" ? ( ( percent || 100 ) / 100 ) : 1;\n\n\t\treturn {\n\t\t\theight: element.height() * y,\n\t\t\twidth: element.width() * x,\n\t\t\touterHeight: element.outerHeight() * y,\n\t\t\touterWidth: element.outerWidth() * x\n\t\t};\n\n\t},\n\n\tclipToBox: function( animation ) {\n\t\treturn {\n\t\t\twidth: animation.clip.right - animation.clip.left,\n\t\t\theight: animation.clip.bottom - animation.clip.top,\n\t\t\tleft: animation.clip.left,\n\t\t\ttop: animation.clip.top\n\t\t};\n\t},\n\n\t// Injects recently queued functions to be first in line (after \"inprogress\")\n\tunshift: function( element, queueLength, count ) {\n\t\tvar queue = element.queue();\n\n\t\tif ( queueLength > 1 ) {\n\t\t\tqueue.splice.apply( queue,\n\t\t\t\t[ 1, 0 ].concat( queue.splice( queueLength, count ) ) );\n\t\t}\n\t\telement.dequeue();\n\t},\n\n\tsaveStyle: function( element ) {\n\t\telement.data( dataSpaceStyle, element[ 0 ].style.cssText );\n\t},\n\n\trestoreStyle: function( element ) {\n\t\telement[ 0 ].style.cssText = element.data( dataSpaceStyle ) || \"\";\n\t\telement.removeData( dataSpaceStyle );\n\t},\n\n\tmode: function( element, mode ) {\n\t\tvar hidden = element.is( \":hidden\" );\n\n\t\tif ( mode === \"toggle\" ) {\n\t\t\tmode = hidden ? \"show\" : \"hide\";\n\t\t}\n\t\tif ( hidden ? mode === \"hide\" : mode === \"show\" ) {\n\t\t\tmode = \"none\";\n\t\t}\n\t\treturn mode;\n\t},\n\n\t// Translates a [top,left] array into a baseline value\n\tgetBaseline: function( origin, original ) {\n\t\tvar y, x;\n\n\t\tswitch ( origin[ 0 ] ) {\n\t\tcase \"top\":\n\t\t\ty = 0;\n\t\t\tbreak;\n\t\tcase \"middle\":\n\t\t\ty = 0.5;\n\t\t\tbreak;\n\t\tcase \"bottom\":\n\t\t\ty = 1;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\ty = origin[ 0 ] / original.height;\n\t\t}\n\n\t\tswitch ( origin[ 1 ] ) {\n\t\tcase \"left\":\n\t\t\tx = 0;\n\t\t\tbreak;\n\t\tcase \"center\":\n\t\t\tx = 0.5;\n\t\t\tbreak;\n\t\tcase \"right\":\n\t\t\tx = 1;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tx = origin[ 1 ] / original.width;\n\t\t}\n\n\t\treturn {\n\t\t\tx: x,\n\t\t\ty: y\n\t\t};\n\t},\n\n\t// Creates a placeholder element so that the original element can be made absolute\n\tcreatePlaceholder: function( element ) {\n\t\tvar placeholder,\n\t\t\tcssPosition = element.css( \"position\" ),\n\t\t\tposition = element.position();\n\n\t\t// Lock in margins first to account for form elements, which\n\t\t// will change margin if you explicitly set height\n\t\t// see: http://jsfiddle.net/JZSMt/3/ https://bugs.webkit.org/show_bug.cgi?id=107380\n\t\t// Support: Safari\n\t\telement.css( {\n\t\t\tmarginTop: element.css( \"marginTop\" ),\n\t\t\tmarginBottom: element.css( \"marginBottom\" ),\n\t\t\tmarginLeft: element.css( \"marginLeft\" ),\n\t\t\tmarginRight: element.css( \"marginRight\" )\n\t\t} )\n\t\t.outerWidth( element.outerWidth() )\n\t\t.outerHeight( element.outerHeight() );\n\n\t\tif ( /^(static|relative)/.test( cssPosition ) ) {\n\t\t\tcssPosition = \"absolute\";\n\n\t\t\tplaceholder = $( \"<\" + element[ 0 ].nodeName + \">\" ).insertAfter( element ).css( {\n\n\t\t\t\t// Convert inline to inline block to account for inline elements\n\t\t\t\t// that turn to inline block based on content (like img)\n\t\t\t\tdisplay: /^(inline|ruby)/.test( element.css( \"display\" ) ) ?\n\t\t\t\t\t\"inline-block\" :\n\t\t\t\t\t\"block\",\n\t\t\t\tvisibility: \"hidden\",\n\n\t\t\t\t// Margins need to be set to account for margin collapse\n\t\t\t\tmarginTop: element.css( \"marginTop\" ),\n\t\t\t\tmarginBottom: element.css( \"marginBottom\" ),\n\t\t\t\tmarginLeft: element.css( \"marginLeft\" ),\n\t\t\t\tmarginRight: element.css( \"marginRight\" ),\n\t\t\t\t\"float\": element.css( \"float\" )\n\t\t\t} )\n\t\t\t.outerWidth( element.outerWidth() )\n\t\t\t.outerHeight( element.outerHeight() )\n\t\t\t.addClass( \"ui-effects-placeholder\" );\n\n\t\t\telement.data( dataSpace + \"placeholder\", placeholder );\n\t\t}\n\n\t\telement.css( {\n\t\t\tposition: cssPosition,\n\t\t\tleft: position.left,\n\t\t\ttop: position.top\n\t\t} );\n\n\t\treturn placeholder;\n\t},\n\n\tremovePlaceholder: function( element ) {\n\t\tvar dataKey = dataSpace + \"placeholder\",\n\t\t\t\tplaceholder = element.data( dataKey );\n\n\t\tif ( placeholder ) {\n\t\t\tplaceholder.remove();\n\t\t\telement.removeData( dataKey );\n\t\t}\n\t},\n\n\t// Removes a placeholder if it exists and restores\n\t// properties that were modified during placeholder creation\n\tcleanUp: function( element ) {\n\t\t$.effects.restoreStyle( element );\n\t\t$.effects.removePlaceholder( element );\n\t},\n\n\tsetTransition: function( element, list, factor, value ) {\n\t\tvalue = value || {};\n\t\t$.each( list, function( i, x ) {\n\t\t\tvar unit = element.cssUnit( x );\n\t\t\tif ( unit[ 0 ] > 0 ) {\n\t\t\t\tvalue[ x ] = unit[ 0 ] * factor + unit[ 1 ];\n\t\t\t}\n\t\t} );\n\t\treturn value;\n\t}\n} );\n\n// Return an effect options object for the given parameters:\nfunction _normalizeArguments( effect, options, speed, callback ) {\n\n\t// Allow passing all options as the first parameter\n\tif ( $.isPlainObject( effect ) ) {\n\t\toptions = effect;\n\t\teffect = effect.effect;\n\t}\n\n\t// Convert to an object\n\teffect = { effect: effect };\n\n\t// Catch (effect, null, ...)\n\tif ( options == null ) {\n\t\toptions = {};\n\t}\n\n\t// Catch (effect, callback)\n\tif ( $.isFunction( options ) ) {\n\t\tcallback = options;\n\t\tspeed = null;\n\t\toptions = {};\n\t}\n\n\t// Catch (effect, speed, ?)\n\tif ( typeof options === \"number\" || $.fx.speeds[ options ] ) {\n\t\tcallback = speed;\n\t\tspeed = options;\n\t\toptions = {};\n\t}\n\n\t// Catch (effect, options, callback)\n\tif ( $.isFunction( speed ) ) {\n\t\tcallback = speed;\n\t\tspeed = null;\n\t}\n\n\t// Add options to effect\n\tif ( options ) {\n\t\t$.extend( effect, options );\n\t}\n\n\tspeed = speed || options.duration;\n\teffect.duration = $.fx.off ? 0 :\n\t\ttypeof speed === \"number\" ? speed :\n\t\tspeed in $.fx.speeds ? $.fx.speeds[ speed ] :\n\t\t$.fx.speeds._default;\n\n\teffect.complete = callback || options.complete;\n\n\treturn effect;\n}\n\nfunction standardAnimationOption( option ) {\n\n\t// Valid standard speeds (nothing, number, named speed)\n\tif ( !option || typeof option === \"number\" || $.fx.speeds[ option ] ) {\n\t\treturn true;\n\t}\n\n\t// Invalid strings - treat as \"normal\" speed\n\tif ( typeof option === \"string\" && !$.effects.effect[ option ] ) {\n\t\treturn true;\n\t}\n\n\t// Complete callback\n\tif ( $.isFunction( option ) ) {\n\t\treturn true;\n\t}\n\n\t// Options hash (but not naming an effect)\n\tif ( typeof option === \"object\" && !option.effect ) {\n\t\treturn true;\n\t}\n\n\t// Didn't match any standard API\n\treturn false;\n}\n\n$.fn.extend( {\n\teffect: function( /* effect, options, speed, callback */ ) {\n\t\tvar args = _normalizeArguments.apply( this, arguments ),\n\t\t\teffectMethod = $.effects.effect[ args.effect ],\n\t\t\tdefaultMode = effectMethod.mode,\n\t\t\tqueue = args.queue,\n\t\t\tqueueName = queue || \"fx\",\n\t\t\tcomplete = args.complete,\n\t\t\tmode = args.mode,\n\t\t\tmodes = [],\n\t\t\tprefilter = function( next ) {\n\t\t\t\tvar el = $( this ),\n\t\t\t\t\tnormalizedMode = $.effects.mode( el, mode ) || defaultMode;\n\n\t\t\t\t// Sentinel for duck-punching the :animated psuedo-selector\n\t\t\t\tel.data( dataSpaceAnimated, true );\n\n\t\t\t\t// Save effect mode for later use,\n\t\t\t\t// we can't just call $.effects.mode again later,\n\t\t\t\t// as the .show() below destroys the initial state\n\t\t\t\tmodes.push( normalizedMode );\n\n\t\t\t\t// See $.uiBackCompat inside of run() for removal of defaultMode in 1.13\n\t\t\t\tif ( defaultMode && ( normalizedMode === \"show\" ||\n\t\t\t\t\t\t( normalizedMode === defaultMode && normalizedMode === \"hide\" ) ) ) {\n\t\t\t\t\tel.show();\n\t\t\t\t}\n\n\t\t\t\tif ( !defaultMode || normalizedMode !== \"none\" ) {\n\t\t\t\t\t$.effects.saveStyle( el );\n\t\t\t\t}\n\n\t\t\t\tif ( $.isFunction( next ) ) {\n\t\t\t\t\tnext();\n\t\t\t\t}\n\t\t\t};\n\n\t\tif ( $.fx.off || !effectMethod ) {\n\n\t\t\t// Delegate to the original method (e.g., .show()) if possible\n\t\t\tif ( mode ) {\n\t\t\t\treturn this[ mode ]( args.duration, complete );\n\t\t\t} else {\n\t\t\t\treturn this.each( function() {\n\t\t\t\t\tif ( complete ) {\n\t\t\t\t\t\tcomplete.call( this );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\t\t}\n\n\t\tfunction run( next ) {\n\t\t\tvar elem = $( this );\n\n\t\t\tfunction cleanup() {\n\t\t\t\telem.removeData( dataSpaceAnimated );\n\n\t\t\t\t$.effects.cleanUp( elem );\n\n\t\t\t\tif ( args.mode === \"hide\" ) {\n\t\t\t\t\telem.hide();\n\t\t\t\t}\n\n\t\t\t\tdone();\n\t\t\t}\n\n\t\t\tfunction done() {\n\t\t\t\tif ( $.isFunction( complete ) ) {\n\t\t\t\t\tcomplete.call( elem[ 0 ] );\n\t\t\t\t}\n\n\t\t\t\tif ( $.isFunction( next ) ) {\n\t\t\t\t\tnext();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Override mode option on a per element basis,\n\t\t\t// as toggle can be either show or hide depending on element state\n\t\t\targs.mode = modes.shift();\n\n\t\t\tif ( $.uiBackCompat !== false && !defaultMode ) {\n\t\t\t\tif ( elem.is( \":hidden\" ) ? mode === \"hide\" : mode === \"show\" ) {\n\n\t\t\t\t\t// Call the core method to track \"olddisplay\" properly\n\t\t\t\t\telem[ mode ]();\n\t\t\t\t\tdone();\n\t\t\t\t} else {\n\t\t\t\t\teffectMethod.call( elem[ 0 ], args, done );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif ( args.mode === \"none\" ) {\n\n\t\t\t\t\t// Call the core method to track \"olddisplay\" properly\n\t\t\t\t\telem[ mode ]();\n\t\t\t\t\tdone();\n\t\t\t\t} else {\n\t\t\t\t\teffectMethod.call( elem[ 0 ], args, cleanup );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Run prefilter on all elements first to ensure that\n\t\t// any showing or hiding happens before placeholder creation,\n\t\t// which ensures that any layout changes are correctly captured.\n\t\treturn queue === false ?\n\t\t\tthis.each( prefilter ).each( run ) :\n\t\t\tthis.queue( queueName, prefilter ).queue( queueName, run );\n\t},\n\n\tshow: ( function( orig ) {\n\t\treturn function( option ) {\n\t\t\tif ( standardAnimationOption( option ) ) {\n\t\t\t\treturn orig.apply( this, arguments );\n\t\t\t} else {\n\t\t\t\tvar args = _normalizeArguments.apply( this, arguments );\n\t\t\t\targs.mode = \"show\";\n\t\t\t\treturn this.effect.call( this, args );\n\t\t\t}\n\t\t};\n\t} )( $.fn.show ),\n\n\thide: ( function( orig ) {\n\t\treturn function( option ) {\n\t\t\tif ( standardAnimationOption( option ) ) {\n\t\t\t\treturn orig.apply( this, arguments );\n\t\t\t} else {\n\t\t\t\tvar args = _normalizeArguments.apply( this, arguments );\n\t\t\t\targs.mode = \"hide\";\n\t\t\t\treturn this.effect.call( this, args );\n\t\t\t}\n\t\t};\n\t} )( $.fn.hide ),\n\n\ttoggle: ( function( orig ) {\n\t\treturn function( option ) {\n\t\t\tif ( standardAnimationOption( option ) || typeof option === \"boolean\" ) {\n\t\t\t\treturn orig.apply( this, arguments );\n\t\t\t} else {\n\t\t\t\tvar args = _normalizeArguments.apply( this, arguments );\n\t\t\t\targs.mode = \"toggle\";\n\t\t\t\treturn this.effect.call( this, args );\n\t\t\t}\n\t\t};\n\t} )( $.fn.toggle ),\n\n\tcssUnit: function( key ) {\n\t\tvar style = this.css( key ),\n\t\t\tval = [];\n\n\t\t$.each( [ \"em\", \"px\", \"%\", \"pt\" ], function( i, unit ) {\n\t\t\tif ( style.indexOf( unit ) > 0 ) {\n\t\t\t\tval = [ parseFloat( style ), unit ];\n\t\t\t}\n\t\t} );\n\t\treturn val;\n\t},\n\n\tcssClip: function( clipObj ) {\n\t\tif ( clipObj ) {\n\t\t\treturn this.css( \"clip\", \"rect(\" + clipObj.top + \"px \" + clipObj.right + \"px \" +\n\t\t\t\tclipObj.bottom + \"px \" + clipObj.left + \"px)\" );\n\t\t}\n\t\treturn parseClip( this.css( \"clip\" ), this );\n\t},\n\n\ttransfer: function( options, done ) {\n\t\tvar element = $( this ),\n\t\t\ttarget = $( options.to ),\n\t\t\ttargetFixed = target.css( \"position\" ) === \"fixed\",\n\t\t\tbody = $( \"body\" ),\n\t\t\tfixTop = targetFixed ? body.scrollTop() : 0,\n\t\t\tfixLeft = targetFixed ? body.scrollLeft() : 0,\n\t\t\tendPosition = target.offset(),\n\t\t\tanimation = {\n\t\t\t\ttop: endPosition.top - fixTop,\n\t\t\t\tleft: endPosition.left - fixLeft,\n\t\t\t\theight: target.innerHeight(),\n\t\t\t\twidth: target.innerWidth()\n\t\t\t},\n\t\t\tstartPosition = element.offset(),\n\t\t\ttransfer = $( \"<div class='ui-effects-transfer'></div>\" )\n\t\t\t\t.appendTo( \"body\" )\n\t\t\t\t.addClass( options.className )\n\t\t\t\t.css( {\n\t\t\t\t\ttop: startPosition.top - fixTop,\n\t\t\t\t\tleft: startPosition.left - fixLeft,\n\t\t\t\t\theight: element.innerHeight(),\n\t\t\t\t\twidth: element.innerWidth(),\n\t\t\t\t\tposition: targetFixed ? \"fixed\" : \"absolute\"\n\t\t\t\t} )\n\t\t\t\t.animate( animation, options.duration, options.easing, function() {\n\t\t\t\t\ttransfer.remove();\n\t\t\t\t\tif ( $.isFunction( done ) ) {\n\t\t\t\t\t\tdone();\n\t\t\t\t\t}\n\t\t\t\t} );\n\t}\n} );\n\nfunction parseClip( str, element ) {\n\t\tvar outerWidth = element.outerWidth(),\n\t\t\touterHeight = element.outerHeight(),\n\t\t\tclipRegex = /^rect\\((-?\\d*\\.?\\d*px|-?\\d+%|auto),?\\s*(-?\\d*\\.?\\d*px|-?\\d+%|auto),?\\s*(-?\\d*\\.?\\d*px|-?\\d+%|auto),?\\s*(-?\\d*\\.?\\d*px|-?\\d+%|auto)\\)$/,\n\t\t\tvalues = clipRegex.exec( str ) || [ \"\", 0, outerWidth, outerHeight, 0 ];\n\n\t\treturn {\n\t\t\ttop: parseFloat( values[ 1 ] ) || 0,\n\t\t\tright: values[ 2 ] === \"auto\" ? outerWidth : parseFloat( values[ 2 ] ),\n\t\t\tbottom: values[ 3 ] === \"auto\" ? outerHeight : parseFloat( values[ 3 ] ),\n\t\t\tleft: parseFloat( values[ 4 ] ) || 0\n\t\t};\n}\n\n$.fx.step.clip = function( fx ) {\n\tif ( !fx.clipInit ) {\n\t\tfx.start = $( fx.elem ).cssClip();\n\t\tif ( typeof fx.end === \"string\" ) {\n\t\t\tfx.end = parseClip( fx.end, fx.elem );\n\t\t}\n\t\tfx.clipInit = true;\n\t}\n\n\t$( fx.elem ).cssClip( {\n\t\ttop: fx.pos * ( fx.end.top - fx.start.top ) + fx.start.top,\n\t\tright: fx.pos * ( fx.end.right - fx.start.right ) + fx.start.right,\n\t\tbottom: fx.pos * ( fx.end.bottom - fx.start.bottom ) + fx.start.bottom,\n\t\tleft: fx.pos * ( fx.end.left - fx.start.left ) + fx.start.left\n\t} );\n};\n\n} )();\n\n/******************************************************************************/\n/*********************************** EASING ***********************************/\n/******************************************************************************/\n\n( function() {\n\n// Based on easing equations from Robert Penner (http://www.robertpenner.com/easing)\n\nvar baseEasings = {};\n\n$.each( [ \"Quad\", \"Cubic\", \"Quart\", \"Quint\", \"Expo\" ], function( i, name ) {\n\tbaseEasings[ name ] = function( p ) {\n\t\treturn Math.pow( p, i + 2 );\n\t};\n} );\n\n$.extend( baseEasings, {\n\tSine: function( p ) {\n\t\treturn 1 - Math.cos( p * Math.PI / 2 );\n\t},\n\tCirc: function( p ) {\n\t\treturn 1 - Math.sqrt( 1 - p * p );\n\t},\n\tElastic: function( p ) {\n\t\treturn p === 0 || p === 1 ? p :\n\t\t\t-Math.pow( 2, 8 * ( p - 1 ) ) * Math.sin( ( ( p - 1 ) * 80 - 7.5 ) * Math.PI / 15 );\n\t},\n\tBack: function( p ) {\n\t\treturn p * p * ( 3 * p - 2 );\n\t},\n\tBounce: function( p ) {\n\t\tvar pow2,\n\t\t\tbounce = 4;\n\n\t\twhile ( p < ( ( pow2 = Math.pow( 2, --bounce ) ) - 1 ) / 11 ) {}\n\t\treturn 1 / Math.pow( 4, 3 - bounce ) - 7.5625 * Math.pow( ( pow2 * 3 - 2 ) / 22 - p, 2 );\n\t}\n} );\n\n$.each( baseEasings, function( name, easeIn ) {\n\t$.easing[ \"easeIn\" + name ] = easeIn;\n\t$.easing[ \"easeOut\" + name ] = function( p ) {\n\t\treturn 1 - easeIn( 1 - p );\n\t};\n\t$.easing[ \"easeInOut\" + name ] = function( p ) {\n\t\treturn p < 0.5 ?\n\t\t\teaseIn( p * 2 ) / 2 :\n\t\t\t1 - easeIn( p * -2 + 2 ) / 2;\n\t};\n} );\n\n} )();\n\nreturn $.effects;\n\n} ) );\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/jquery-ui/ui/effect.js\n");

/***/ }),

/***/ "./node_modules/jquery-ui/ui/effects/effect-highlight.js":
/*!***************************************************************!*\
  !*** ./node_modules/jquery-ui/ui/effects/effect-highlight.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n * jQuery UI Effects Highlight 1.12.1\n * http://jqueryui.com\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n */\n\n//>>label: Highlight Effect\n//>>group: Effects\n//>>description: Highlights the background of an element in a defined color for a custom duration.\n//>>docs: http://api.jqueryui.com/highlight-effect/\n//>>demos: http://jqueryui.com/effect/\n\n( function( factory ) {\n\tif ( true ) {\n\n\t\t// AMD. Register as an anonymous module.\n\t\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n\t\t\t__webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\"),\n\t\t\t__webpack_require__(/*! ../version */ \"./node_modules/jquery-ui/ui/version.js\"),\n\t\t\t__webpack_require__(/*! ../effect */ \"./node_modules/jquery-ui/ui/effect.js\")\n\t\t], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t} else {}\n}( function( $ ) {\n\nreturn $.effects.define( \"highlight\", \"show\", function( options, done ) {\n\tvar element = $( this ),\n\t\tanimation = {\n\t\t\tbackgroundColor: element.css( \"backgroundColor\" )\n\t\t};\n\n\tif ( options.mode === \"hide\" ) {\n\t\tanimation.opacity = 0;\n\t}\n\n\t$.effects.saveStyle( element );\n\n\telement\n\t\t.css( {\n\t\t\tbackgroundImage: \"none\",\n\t\t\tbackgroundColor: options.color || \"#ffff99\"\n\t\t} )\n\t\t.animate( animation, {\n\t\t\tqueue: false,\n\t\t\tduration: options.duration,\n\t\t\teasing: options.easing,\n\t\t\tcomplete: done\n\t\t} );\n} );\n\n} ) );\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvanF1ZXJ5LXVpL3VpL2VmZmVjdHMvZWZmZWN0LWhpZ2hsaWdodC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qcXVlcnktdWkvdWkvZWZmZWN0cy9lZmZlY3QtaGlnaGxpZ2h0LmpzP2Q2MzMiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBqUXVlcnkgVUkgRWZmZWN0cyBIaWdobGlnaHQgMS4xMi4xXG4gKiBodHRwOi8vanF1ZXJ5dWkuY29tXG4gKlxuICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqL1xuXG4vLz4+bGFiZWw6IEhpZ2hsaWdodCBFZmZlY3Rcbi8vPj5ncm91cDogRWZmZWN0c1xuLy8+PmRlc2NyaXB0aW9uOiBIaWdobGlnaHRzIHRoZSBiYWNrZ3JvdW5kIG9mIGFuIGVsZW1lbnQgaW4gYSBkZWZpbmVkIGNvbG9yIGZvciBhIGN1c3RvbSBkdXJhdGlvbi5cbi8vPj5kb2NzOiBodHRwOi8vYXBpLmpxdWVyeXVpLmNvbS9oaWdobGlnaHQtZWZmZWN0L1xuLy8+PmRlbW9zOiBodHRwOi8vanF1ZXJ5dWkuY29tL2VmZmVjdC9cblxuKCBmdW5jdGlvbiggZmFjdG9yeSApIHtcblx0aWYgKCB0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCApIHtcblxuXHRcdC8vIEFNRC4gUmVnaXN0ZXIgYXMgYW4gYW5vbnltb3VzIG1vZHVsZS5cblx0XHRkZWZpbmUoIFtcblx0XHRcdFwianF1ZXJ5XCIsXG5cdFx0XHRcIi4uL3ZlcnNpb25cIixcblx0XHRcdFwiLi4vZWZmZWN0XCJcblx0XHRdLCBmYWN0b3J5ICk7XG5cdH0gZWxzZSB7XG5cblx0XHQvLyBCcm93c2VyIGdsb2JhbHNcblx0XHRmYWN0b3J5KCBqUXVlcnkgKTtcblx0fVxufSggZnVuY3Rpb24oICQgKSB7XG5cbnJldHVybiAkLmVmZmVjdHMuZGVmaW5lKCBcImhpZ2hsaWdodFwiLCBcInNob3dcIiwgZnVuY3Rpb24oIG9wdGlvbnMsIGRvbmUgKSB7XG5cdHZhciBlbGVtZW50ID0gJCggdGhpcyApLFxuXHRcdGFuaW1hdGlvbiA9IHtcblx0XHRcdGJhY2tncm91bmRDb2xvcjogZWxlbWVudC5jc3MoIFwiYmFja2dyb3VuZENvbG9yXCIgKVxuXHRcdH07XG5cblx0aWYgKCBvcHRpb25zLm1vZGUgPT09IFwiaGlkZVwiICkge1xuXHRcdGFuaW1hdGlvbi5vcGFjaXR5ID0gMDtcblx0fVxuXG5cdCQuZWZmZWN0cy5zYXZlU3R5bGUoIGVsZW1lbnQgKTtcblxuXHRlbGVtZW50XG5cdFx0LmNzcygge1xuXHRcdFx0YmFja2dyb3VuZEltYWdlOiBcIm5vbmVcIixcblx0XHRcdGJhY2tncm91bmRDb2xvcjogb3B0aW9ucy5jb2xvciB8fCBcIiNmZmZmOTlcIlxuXHRcdH0gKVxuXHRcdC5hbmltYXRlKCBhbmltYXRpb24sIHtcblx0XHRcdHF1ZXVlOiBmYWxzZSxcblx0XHRcdGR1cmF0aW9uOiBvcHRpb25zLmR1cmF0aW9uLFxuXHRcdFx0ZWFzaW5nOiBvcHRpb25zLmVhc2luZyxcblx0XHRcdGNvbXBsZXRlOiBkb25lXG5cdFx0fSApO1xufSApO1xuXG59ICkgKTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0EsVUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/jquery-ui/ui/effects/effect-highlight.js\n");

/***/ })

/******/ });