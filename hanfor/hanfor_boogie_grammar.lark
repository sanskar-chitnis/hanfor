// Expressions
// Start with exprcommastar
?exprcommastar: exprcommaplus? -> exprcommastar

exprcommaplus: expr
    | exprcommaplus COMMA expr

expr: expr1ni IFF expr -> iff
    | expr1

expr1: expr2ni IMPLIES exprimplies -> implies
    | exprexpliesni EXPLIES expr2 -> explies
    | expr2

exprimplies: expr2ni IMPLIES exprimplies -> implies
    | expr2

expr2: expr3ni AND exprand -> conjunction
    | expr3ni OR expror -> disjunction
    | expr3

exprand: expr3ni AND exprand -> conjunction
    | expr3

expror: expr3ni OR expror -> disjunction
    | expr3

expr3: expr4ni LESS expr4 -> lt
    | expr4ni GREATER expr4 -> gt
    | expr4ni LTEQ expr4 -> lteq
    | expr4ni GTEQ expr4 -> gteq
    | expr4ni EQ expr4 -> eq
    | expr4ni NEQ expr4 -> neq
    | expr4ni PARTORDER expr4 -> partorder
    | expr4

expr4: expr4ni CONCAT expr5 -> concat
    | expr5

expr5: expr5ni PLUS expr6 -> plus
    | expr5ni MINUS expr6 -> minus
    | expr6

expr6: expr6ni TIMES expr7 -> times
    | expr6ni DIVIDE expr7 -> divide
    | expr6ni MOD expr7 -> mod
    | expr7

expr7: NOT expr7 -> negation
    | MINUS expr7 -> minus_unary
    | PLUS expr7 -> plus_unary
    | expr8

expr8: expr8ni NOT ID -> negation
    | expr9

expr9: FALSE -> false
    | TRUE -> true
    | NUMBER -> number
    | REALNUMBER -> realnumber
    | ID -> id
    | ID _LPAR exprcommastar _RPAR
    | OLD _LPAR expr _RPAR -> old
    | IF expr THEN expr ELSE expr
    | LBRC idsexprcommaplus RBRC
    | _LPAR expr _RPAR
    | function

// expressions  without if-then-else

expr1ni: expr2ni IMPLIES exprimpliesni -> implies
    | exprexpliesni EXPLIES expr2ni -> explies
    | expr2ni

exprimpliesni: expr2ni IMPLIES exprimpliesni -> implies
    | expr2ni

exprexpliesni: exprexpliesni EXPLIES expr2ni -> explies
    | expr2ni

expr2ni: expr3ni AND exprandni -> conjunction
    | expr3ni OR exprorni -> disjunction
    | expr3ni

exprandni: expr3ni AND exprandni -> conjunction
    | expr3ni

exprorni: expr3ni OR exprorni -> disjunction
    | expr3ni

expr3ni: expr4ni LESS expr4ni -> lt
    | expr4ni GREATER expr4ni -> gt
    | expr4ni LTEQ expr4ni -> lteq
    | expr4ni GTEQ expr4ni -> gteq
    | expr4ni EQ expr4ni -> eq
    | expr4ni NEQ expr4ni -> neq
    | expr4ni PARTORDER expr4ni -> partorder
    | expr4ni

expr4ni: expr4ni CONCAT expr5ni -> concat
    | expr5ni

expr5ni: expr5ni PLUS expr6ni -> plus
    | expr5ni MINUS expr6ni -> minus
    | expr6ni

expr6ni: expr6ni TIMES expr7ni -> times
    | expr6ni DIVIDE expr7ni -> divide
    | expr6ni MOD expr7ni -> mod
    | expr7ni

expr7ni: NOT expr7ni -> negation
    | MINUS expr7ni -> minus_unary
    | expr8ni

expr8ni: expr8ni NOT ID -> negation
    | expr9ni

expr9ni: FALSE -> false
    | TRUE -> true
    | NUMBER -> number
    | REALNUMBER -> realnumber
    | ID -> id
    | ID _LPAR exprcommastar _RPAR
    | OLD _LPAR expr _RPAR -> old
    | LBRC idsexprcommaplus RBRC
    | _LPAR expr _RPAR
    | function

quant: FORALL
    | EXISTS

idsexprcommaplus: ID COLON expr
    | idsexprcommaplus COMMA ID COLON expr

function: ABS _LPAR expr1ni _RPAR -> abs
    | MIN _LPAR expr1ni _COMMA expr1ni _RPAR -> min
    | MAX _LPAR expr1ni _COMMA expr1ni _RPAR -> max


// Terminals

ABS: "abs"
AND: "&&"
COLON: ":"
COLONEQUALS: ":="
COMMA: ","
_COMMA: ","
CONCAT: "++"
DIVIDE: "/"
ELSE.1: "else"
EQ: "=="
EXISTS.1: "exists"
EXPLIES: "<=="
FALSE.1: "false"
FORALL.1: "forall"
GREATER: ">"
GTEQ: ">="
ID: /[A-Za-z'~#$\^_.?\\][0-9A-Za-z'~#$\^_.?\\]*/
IF.1: "if"
IFF: "<==>"
IMPLIES: "==>"
LBKT: "["
LBRC: "{"
LESS: "<"
_LPAR: "("
LTEQ: "<="
MAX: "max"
MIN: "min"
MINUS: "-"
MOD: "%"
NEQ: "!="
NOT: "!"
NUMBER: "0" | /[1-9][0-9]*/
OLD.1: "old"
OR: "||"
PARTORDER: "<:"
PLUS: "+"
QSEP: "::"
RBKT: "]"
RBRC: "}"
REALNUMBER: NUMBER "." /[0-9]+/
_RPAR: ")"
THEN.1: "then"
TIMES: "*"
TRUE.1: "true"

// Misc
%import common.WS
%ignore WS